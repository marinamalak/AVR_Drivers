
Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b0a  00000b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ff0  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000725  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 61 05 	call	0xac2	; 0xac2 <main>
  7a:	0c 94 83 05 	jmp	0xb06	; 0xb06 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8a e4       	ldi	r24, 0x4A	; 74
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
  ba:	e5 e3       	ldi	r30, 0x35	; 53
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	89 e9       	ldi	r24, 0x99	; 153
  c0:	80 83       	st	Z, r24
  c2:	e2 e3       	ldi	r30, 0x32	; 50
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	89 ed       	ldi	r24, 0xD9	; 217
  c8:	80 83       	st	Z, r24
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <DIO_enuSetPortDirection>:

	 Local_enuErrorstate = ES_OK;
	return Local_enuErrorstate;
}
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value )
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <DIO_enuSetPortDirection+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDirection+0x8>
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	8a 83       	std	Y+2, r24	; 0x02
  e8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate= ES_NOK ;
  ea:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD)
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	a8 f5       	brcc	.+106    	; 0x15c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3d 83       	std	Y+5, r19	; 0x05
  fa:	2c 83       	std	Y+4, r18	; 0x04
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	9d 81       	ldd	r25, Y+5	; 0x05
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	d1 f0       	breq	.+52     	; 0x13a <DIO_enuSetPortDirection+0x62>
 106:	2c 81       	ldd	r18, Y+4	; 0x04
 108:	3d 81       	ldd	r19, Y+5	; 0x05
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	31 05       	cpc	r19, r1
 10e:	2c f4       	brge	.+10     	; 0x11a <DIO_enuSetPortDirection+0x42>
 110:	8c 81       	ldd	r24, Y+4	; 0x04
 112:	9d 81       	ldd	r25, Y+5	; 0x05
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	61 f0       	breq	.+24     	; 0x130 <DIO_enuSetPortDirection+0x58>
 118:	1e c0       	rjmp	.+60     	; 0x156 <DIO_enuSetPortDirection+0x7e>
 11a:	2c 81       	ldd	r18, Y+4	; 0x04
 11c:	3d 81       	ldd	r19, Y+5	; 0x05
 11e:	22 30       	cpi	r18, 0x02	; 2
 120:	31 05       	cpc	r19, r1
 122:	81 f0       	breq	.+32     	; 0x144 <DIO_enuSetPortDirection+0x6c>
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	9d 81       	ldd	r25, Y+5	; 0x05
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	91 05       	cpc	r25, r1
 12c:	81 f0       	breq	.+32     	; 0x14e <DIO_enuSetPortDirection+0x76>
 12e:	13 c0       	rjmp	.+38     	; 0x156 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	80 83       	st	Z, r24
 138:	0e c0       	rjmp	.+28     	; 0x156 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
 13a:	e7 e3       	ldi	r30, 0x37	; 55
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 83       	st	Z, r24
 142:	09 c0       	rjmp	.+18     	; 0x156 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
 14c:	04 c0       	rjmp	.+8      	; 0x156 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
 14e:	e1 e3       	ldi	r30, 0x31	; 49
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate = ES_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	89 83       	std	Y+1, r24	; 0x01
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		 Local_enuErrorstate = ES_OUT_OF_RANGE;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 160:	89 81       	ldd	r24, Y+1	; 0x01
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value )
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_enuSetPortValue+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortValue+0x8>
 17a:	0f 92       	push	r0
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	8a 83       	std	Y+2, r24	; 0x02
 182:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 184:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	a8 f5       	brcc	.+106    	; 0x1f6 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3d 83       	std	Y+5, r19	; 0x05
 194:	2c 83       	std	Y+4, r18	; 0x04
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	9d 81       	ldd	r25, Y+5	; 0x05
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	d1 f0       	breq	.+52     	; 0x1d4 <DIO_enuSetPortValue+0x62>
 1a0:	2c 81       	ldd	r18, Y+4	; 0x04
 1a2:	3d 81       	ldd	r19, Y+5	; 0x05
 1a4:	22 30       	cpi	r18, 0x02	; 2
 1a6:	31 05       	cpc	r19, r1
 1a8:	2c f4       	brge	.+10     	; 0x1b4 <DIO_enuSetPortValue+0x42>
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	9d 81       	ldd	r25, Y+5	; 0x05
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	61 f0       	breq	.+24     	; 0x1ca <DIO_enuSetPortValue+0x58>
 1b2:	1e c0       	rjmp	.+60     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
 1b4:	2c 81       	ldd	r18, Y+4	; 0x04
 1b6:	3d 81       	ldd	r19, Y+5	; 0x05
 1b8:	22 30       	cpi	r18, 0x02	; 2
 1ba:	31 05       	cpc	r19, r1
 1bc:	81 f0       	breq	.+32     	; 0x1de <DIO_enuSetPortValue+0x6c>
 1be:	8c 81       	ldd	r24, Y+4	; 0x04
 1c0:	9d 81       	ldd	r25, Y+5	; 0x05
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	91 05       	cpc	r25, r1
 1c6:	81 f0       	breq	.+32     	; 0x1e8 <DIO_enuSetPortValue+0x76>
 1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
 1ca:	eb e3       	ldi	r30, 0x3B	; 59
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	80 83       	st	Z, r24
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
 1d4:	e8 e3       	ldi	r30, 0x38	; 56
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	80 83       	st	Z, r24
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
 1de:	e5 e3       	ldi	r30, 0x35	; 53
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	80 83       	st	Z, r24
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
 1e8:	e2 e3       	ldi	r30, 0x32	; 50
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate = ES_OK;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_enuSetPortValue+0x88>
	}
	else
	{
		 Local_enuErrorstate = ES_OUT_OF_RANGE;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID )
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	00 d0       	rcall	.+0      	; 0x212 <DIO_enuTogPort+0x6>
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuTogPort+0x8>
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
 21a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	08 f0       	brcs	.+2      	; 0x224 <DIO_enuTogPort+0x18>
 222:	41 c0       	rjmp	.+130    	; 0x2a6 <DIO_enuTogPort+0x9a>
	{
		switch(Copy_u8PortID)
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	3c 83       	std	Y+4, r19	; 0x04
 22c:	2b 83       	std	Y+3, r18	; 0x03
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	e9 f0       	breq	.+58     	; 0x272 <DIO_enuTogPort+0x66>
 238:	2b 81       	ldd	r18, Y+3	; 0x03
 23a:	3c 81       	ldd	r19, Y+4	; 0x04
 23c:	22 30       	cpi	r18, 0x02	; 2
 23e:	31 05       	cpc	r19, r1
 240:	2c f4       	brge	.+10     	; 0x24c <DIO_enuTogPort+0x40>
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	61 f0       	breq	.+24     	; 0x262 <DIO_enuTogPort+0x56>
 24a:	2a c0       	rjmp	.+84     	; 0x2a0 <DIO_enuTogPort+0x94>
 24c:	2b 81       	ldd	r18, Y+3	; 0x03
 24e:	3c 81       	ldd	r19, Y+4	; 0x04
 250:	22 30       	cpi	r18, 0x02	; 2
 252:	31 05       	cpc	r19, r1
 254:	b1 f0       	breq	.+44     	; 0x282 <DIO_enuTogPort+0x76>
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	91 05       	cpc	r25, r1
 25e:	c9 f0       	breq	.+50     	; 0x292 <DIO_enuTogPort+0x86>
 260:	1f c0       	rjmp	.+62     	; 0x2a0 <DIO_enuTogPort+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
 262:	ab e3       	ldi	r26, 0x3B	; 59
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	eb e3       	ldi	r30, 0x3B	; 59
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 95       	com	r24
 26e:	8c 93       	st	X, r24
 270:	17 c0       	rjmp	.+46     	; 0x2a0 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
 272:	a8 e3       	ldi	r26, 0x38	; 56
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	e8 e3       	ldi	r30, 0x38	; 56
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 95       	com	r24
 27e:	8c 93       	st	X, r24
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
 282:	a5 e3       	ldi	r26, 0x35	; 53
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e5 e3       	ldi	r30, 0x35	; 53
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 95       	com	r24
 28e:	8c 93       	st	X, r24
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
 292:	a2 e3       	ldi	r26, 0x32	; 50
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e2 e3       	ldi	r30, 0x32	; 50
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 95       	com	r24
 29e:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate = ES_OK;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_enuTogPort+0x9e>
	}
	else
	{
		 Local_enuErrorstate = ES_OUT_OF_RANGE;
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	08 95       	ret

000002ba <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8* Copy_Pu8Value )
{
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <DIO_enuGetPortValue+0x6>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortValue+0x8>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_enuGetPortValue+0xa>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	8a 83       	std	Y+2, r24	; 0x02
 2ca:	7c 83       	std	Y+4, r23	; 0x04
 2cc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 2ce:	19 82       	std	Y+1, r1	; 0x01
      if(Copy_Pu8Value != NULL)
 2d0:	8b 81       	ldd	r24, Y+3	; 0x03
 2d2:	9c 81       	ldd	r25, Y+4	; 0x04
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_enuGetPortValue+0x20>
 2d8:	43 c0       	rjmp	.+134    	; 0x360 <DIO_enuGetPortValue+0xa6>
      {
    	  if (Copy_u8PortID <= DIO_PORTD)
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	84 30       	cpi	r24, 0x04	; 4
 2de:	e8 f5       	brcc	.+122    	; 0x35a <DIO_enuGetPortValue+0xa0>
    	  {
    			switch(Copy_u8PortID)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	3e 83       	std	Y+6, r19	; 0x06
 2e8:	2d 83       	std	Y+5, r18	; 0x05
 2ea:	8d 81       	ldd	r24, Y+5	; 0x05
 2ec:	9e 81       	ldd	r25, Y+6	; 0x06
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	91 05       	cpc	r25, r1
 2f2:	e1 f0       	breq	.+56     	; 0x32c <DIO_enuGetPortValue+0x72>
 2f4:	2d 81       	ldd	r18, Y+5	; 0x05
 2f6:	3e 81       	ldd	r19, Y+6	; 0x06
 2f8:	22 30       	cpi	r18, 0x02	; 2
 2fa:	31 05       	cpc	r19, r1
 2fc:	2c f4       	brge	.+10     	; 0x308 <DIO_enuGetPortValue+0x4e>
 2fe:	8d 81       	ldd	r24, Y+5	; 0x05
 300:	9e 81       	ldd	r25, Y+6	; 0x06
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	61 f0       	breq	.+24     	; 0x31e <DIO_enuGetPortValue+0x64>
 306:	26 c0       	rjmp	.+76     	; 0x354 <DIO_enuGetPortValue+0x9a>
 308:	2d 81       	ldd	r18, Y+5	; 0x05
 30a:	3e 81       	ldd	r19, Y+6	; 0x06
 30c:	22 30       	cpi	r18, 0x02	; 2
 30e:	31 05       	cpc	r19, r1
 310:	a1 f0       	breq	.+40     	; 0x33a <DIO_enuGetPortValue+0x80>
 312:	8d 81       	ldd	r24, Y+5	; 0x05
 314:	9e 81       	ldd	r25, Y+6	; 0x06
 316:	83 30       	cpi	r24, 0x03	; 3
 318:	91 05       	cpc	r25, r1
 31a:	b1 f0       	breq	.+44     	; 0x348 <DIO_enuGetPortValue+0x8e>
 31c:	1b c0       	rjmp	.+54     	; 0x354 <DIO_enuGetPortValue+0x9a>
    			{
    			case DIO_PORTA:
    				*Copy_Pu8Value = PINA;
 31e:	e9 e3       	ldi	r30, 0x39	; 57
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	eb 81       	ldd	r30, Y+3	; 0x03
 326:	fc 81       	ldd	r31, Y+4	; 0x04
 328:	80 83       	st	Z, r24
 32a:	14 c0       	rjmp	.+40     	; 0x354 <DIO_enuGetPortValue+0x9a>
    				break;
    			case DIO_PORTB:
    				*Copy_Pu8Value = PINB;
 32c:	e6 e3       	ldi	r30, 0x36	; 54
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	eb 81       	ldd	r30, Y+3	; 0x03
 334:	fc 81       	ldd	r31, Y+4	; 0x04
 336:	80 83       	st	Z, r24
 338:	0d c0       	rjmp	.+26     	; 0x354 <DIO_enuGetPortValue+0x9a>
    				break;
    			case DIO_PORTC:
    				*Copy_Pu8Value = PINC;
 33a:	e3 e3       	ldi	r30, 0x33	; 51
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	eb 81       	ldd	r30, Y+3	; 0x03
 342:	fc 81       	ldd	r31, Y+4	; 0x04
 344:	80 83       	st	Z, r24
 346:	06 c0       	rjmp	.+12     	; 0x354 <DIO_enuGetPortValue+0x9a>
    				break;
    			case DIO_PORTD:
    				*Copy_Pu8Value = PIND;
 348:	e0 e3       	ldi	r30, 0x30	; 48
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	eb 81       	ldd	r30, Y+3	; 0x03
 350:	fc 81       	ldd	r31, Y+4	; 0x04
 352:	80 83       	st	Z, r24
    				break;
    			}
    			 Local_enuErrorstate = ES_OK;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	05 c0       	rjmp	.+10     	; 0x364 <DIO_enuGetPortValue+0xaa>
    	  }else
    	  {
    		  Local_enuErrorstate = ES_OUT_OF_RANGE;
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_enuGetPortValue+0xaa>
    	  }
      }else
      {
    	  Local_enuErrorstate = ES_NULL_POINTER;
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	89 83       	std	Y+1, r24	; 0x01
      }
	return Local_enuErrorstate;
 364:	89 81       	ldd	r24, Y+1	; 0x01
}
 366:	26 96       	adiw	r28, 0x06	; 6
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID, u8 Copy_u8Value )
{
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <DIO_enuSetPinDirection+0x6>
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPinDirection+0x8>
 380:	00 d0       	rcall	.+0      	; 0x382 <DIO_enuSetPinDirection+0xa>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	8a 83       	std	Y+2, r24	; 0x02
 388:	6b 83       	std	Y+3, r22	; 0x03
 38a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 38c:	19 82       	std	Y+1, r1	; 0x01
	  if (Copy_u8PortID <= DIO_PORTD &&
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	08 f0       	brcs	.+2      	; 0x396 <DIO_enuSetPinDirection+0x1e>
 394:	d1 c0       	rjmp	.+418    	; 0x538 <DIO_enuSetPinDirection+0x1c0>
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	88 30       	cpi	r24, 0x08	; 8
 39a:	08 f0       	brcs	.+2      	; 0x39e <DIO_enuSetPinDirection+0x26>
 39c:	cd c0       	rjmp	.+410    	; 0x538 <DIO_enuSetPinDirection+0x1c0>
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <DIO_enuSetPinDirection+0x2e>
 3a4:	c9 c0       	rjmp	.+402    	; 0x538 <DIO_enuSetPinDirection+0x1c0>
			  Copy_u8PinID <=DIO_PIN7 &&
			  Copy_u8Value <= OUTPUT)
	    	  {
			switch(Copy_u8PortID)
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	3e 83       	std	Y+6, r19	; 0x06
 3ae:	2d 83       	std	Y+5, r18	; 0x05
 3b0:	6d 81       	ldd	r22, Y+5	; 0x05
 3b2:	7e 81       	ldd	r23, Y+6	; 0x06
 3b4:	61 30       	cpi	r22, 0x01	; 1
 3b6:	71 05       	cpc	r23, r1
 3b8:	09 f4       	brne	.+2      	; 0x3bc <DIO_enuSetPinDirection+0x44>
 3ba:	41 c0       	rjmp	.+130    	; 0x43e <DIO_enuSetPinDirection+0xc6>
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	91 05       	cpc	r25, r1
 3c4:	34 f4       	brge	.+12     	; 0x3d2 <DIO_enuSetPinDirection+0x5a>
 3c6:	2d 81       	ldd	r18, Y+5	; 0x05
 3c8:	3e 81       	ldd	r19, Y+6	; 0x06
 3ca:	21 15       	cp	r18, r1
 3cc:	31 05       	cpc	r19, r1
 3ce:	71 f0       	breq	.+28     	; 0x3ec <DIO_enuSetPinDirection+0x74>
 3d0:	b0 c0       	rjmp	.+352    	; 0x532 <DIO_enuSetPinDirection+0x1ba>
 3d2:	6d 81       	ldd	r22, Y+5	; 0x05
 3d4:	7e 81       	ldd	r23, Y+6	; 0x06
 3d6:	62 30       	cpi	r22, 0x02	; 2
 3d8:	71 05       	cpc	r23, r1
 3da:	09 f4       	brne	.+2      	; 0x3de <DIO_enuSetPinDirection+0x66>
 3dc:	59 c0       	rjmp	.+178    	; 0x490 <DIO_enuSetPinDirection+0x118>
 3de:	8d 81       	ldd	r24, Y+5	; 0x05
 3e0:	9e 81       	ldd	r25, Y+6	; 0x06
 3e2:	83 30       	cpi	r24, 0x03	; 3
 3e4:	91 05       	cpc	r25, r1
 3e6:	09 f4       	brne	.+2      	; 0x3ea <DIO_enuSetPinDirection+0x72>
 3e8:	7c c0       	rjmp	.+248    	; 0x4e2 <DIO_enuSetPinDirection+0x16a>
 3ea:	a3 c0       	rjmp	.+326    	; 0x532 <DIO_enuSetPinDirection+0x1ba>
			{
			case DIO_PORTA:
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
 3ec:	aa e3       	ldi	r26, 0x3A	; 58
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	ea e3       	ldi	r30, 0x3A	; 58
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	48 2f       	mov	r20, r24
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_enuSetPinDirection+0x90>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	2a 95       	dec	r18
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_enuSetPinDirection+0x8c>
 40c:	80 95       	com	r24
 40e:	84 23       	and	r24, r20
 410:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Value<<Copy_u8PinID);
 412:	aa e3       	ldi	r26, 0x3A	; 58
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	ea e3       	ldi	r30, 0x3A	; 58
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_enuSetPinDirection+0xba>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_enuSetPinDirection+0xb6>
 436:	cb 01       	movw	r24, r22
 438:	84 2b       	or	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	7a c0       	rjmp	.+244    	; 0x532 <DIO_enuSetPinDirection+0x1ba>
				break;
			case DIO_PORTB:
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
 43e:	a7 e3       	ldi	r26, 0x37	; 55
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	e7 e3       	ldi	r30, 0x37	; 55
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_enuSetPinDirection+0xe2>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	2a 95       	dec	r18
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_enuSetPinDirection+0xde>
 45e:	80 95       	com	r24
 460:	84 23       	and	r24, r20
 462:	8c 93       	st	X, r24
				DDRB |=(Copy_u8Value<<Copy_u8PinID);
 464:	a7 e3       	ldi	r26, 0x37	; 55
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	e7 e3       	ldi	r30, 0x37	; 55
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	48 2f       	mov	r20, r24
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	88 2f       	mov	r24, r24
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	b9 01       	movw	r22, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_enuSetPinDirection+0x10c>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_enuSetPinDirection+0x108>
 488:	cb 01       	movw	r24, r22
 48a:	84 2b       	or	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	51 c0       	rjmp	.+162    	; 0x532 <DIO_enuSetPinDirection+0x1ba>
				break;
			case DIO_PORTC:
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
 490:	a4 e3       	ldi	r26, 0x34	; 52
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e4 e3       	ldi	r30, 0x34	; 52
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_enuSetPinDirection+0x134>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	2a 95       	dec	r18
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_enuSetPinDirection+0x130>
 4b0:	80 95       	com	r24
 4b2:	84 23       	and	r24, r20
 4b4:	8c 93       	st	X, r24
				DDRC |=(Copy_u8Value<<Copy_u8PinID);
 4b6:	a4 e3       	ldi	r26, 0x34	; 52
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	e4 e3       	ldi	r30, 0x34	; 52
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	48 2f       	mov	r20, r24
 4c2:	8c 81       	ldd	r24, Y+4	; 0x04
 4c4:	28 2f       	mov	r18, r24
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_enuSetPinDirection+0x15e>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	8a 95       	dec	r24
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_enuSetPinDirection+0x15a>
 4da:	cb 01       	movw	r24, r22
 4dc:	84 2b       	or	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	28 c0       	rjmp	.+80     	; 0x532 <DIO_enuSetPinDirection+0x1ba>
				break;
			case DIO_PORTD:
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
 4e2:	a1 e3       	ldi	r26, 0x31	; 49
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e1 e3       	ldi	r30, 0x31	; 49
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_enuSetPinDirection+0x186>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	2a 95       	dec	r18
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_enuSetPinDirection+0x182>
 502:	80 95       	com	r24
 504:	84 23       	and	r24, r20
 506:	8c 93       	st	X, r24
				DDRD |=(Copy_u8Value<<Copy_u8PinID);
 508:	a1 e3       	ldi	r26, 0x31	; 49
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	e1 e3       	ldi	r30, 0x31	; 49
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	8b 81       	ldd	r24, Y+3	; 0x03
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_enuSetPinDirection+0x1b0>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_enuSetPinDirection+0x1ac>
 52c:	cb 01       	movw	r24, r22
 52e:	84 2b       	or	r24, r20
 530:	8c 93       	st	X, r24
				break;
			}
			 Local_enuErrorstate = ES_OK;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	89 83       	std	Y+1, r24	; 0x01
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_enuSetPinDirection+0x1c4>
	    	  }else
	    	  {
	    		  Local_enuErrorstate = ES_OUT_OF_RANGE;
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	89 83       	std	Y+1, r24	; 0x01
	    	  }
	return Local_enuErrorstate;
 53c:	89 81       	ldd	r24, Y+1	; 0x01
}
 53e:	26 96       	adiw	r28, 0x06	; 6
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID, u8 Copy_u8Value )
{
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	00 d0       	rcall	.+0      	; 0x556 <DIO_enuSetPinValue+0x6>
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPinValue+0x8>
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_enuSetPinValue+0xa>
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	8a 83       	std	Y+2, r24	; 0x02
 560:	6b 83       	std	Y+3, r22	; 0x03
 562:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 564:	19 82       	std	Y+1, r1	; 0x01
	  if (Copy_u8PortID <= DIO_PORTD &&
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	84 30       	cpi	r24, 0x04	; 4
 56a:	08 f0       	brcs	.+2      	; 0x56e <DIO_enuSetPinValue+0x1e>
 56c:	d1 c0       	rjmp	.+418    	; 0x710 <DIO_enuSetPinValue+0x1c0>
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	08 f0       	brcs	.+2      	; 0x576 <DIO_enuSetPinValue+0x26>
 574:	cd c0       	rjmp	.+410    	; 0x710 <DIO_enuSetPinValue+0x1c0>
 576:	8c 81       	ldd	r24, Y+4	; 0x04
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	08 f0       	brcs	.+2      	; 0x57e <DIO_enuSetPinValue+0x2e>
 57c:	c9 c0       	rjmp	.+402    	; 0x710 <DIO_enuSetPinValue+0x1c0>
			  Copy_u8PinID <=DIO_PIN7 &&
			  Copy_u8Value <= OUTPUT)
	    	  {
			switch(Copy_u8PortID)
 57e:	8a 81       	ldd	r24, Y+2	; 0x02
 580:	28 2f       	mov	r18, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	3e 83       	std	Y+6, r19	; 0x06
 586:	2d 83       	std	Y+5, r18	; 0x05
 588:	6d 81       	ldd	r22, Y+5	; 0x05
 58a:	7e 81       	ldd	r23, Y+6	; 0x06
 58c:	61 30       	cpi	r22, 0x01	; 1
 58e:	71 05       	cpc	r23, r1
 590:	09 f4       	brne	.+2      	; 0x594 <DIO_enuSetPinValue+0x44>
 592:	41 c0       	rjmp	.+130    	; 0x616 <DIO_enuSetPinValue+0xc6>
 594:	8d 81       	ldd	r24, Y+5	; 0x05
 596:	9e 81       	ldd	r25, Y+6	; 0x06
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	91 05       	cpc	r25, r1
 59c:	34 f4       	brge	.+12     	; 0x5aa <DIO_enuSetPinValue+0x5a>
 59e:	2d 81       	ldd	r18, Y+5	; 0x05
 5a0:	3e 81       	ldd	r19, Y+6	; 0x06
 5a2:	21 15       	cp	r18, r1
 5a4:	31 05       	cpc	r19, r1
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <DIO_enuSetPinValue+0x74>
 5a8:	b0 c0       	rjmp	.+352    	; 0x70a <DIO_enuSetPinValue+0x1ba>
 5aa:	6d 81       	ldd	r22, Y+5	; 0x05
 5ac:	7e 81       	ldd	r23, Y+6	; 0x06
 5ae:	62 30       	cpi	r22, 0x02	; 2
 5b0:	71 05       	cpc	r23, r1
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <DIO_enuSetPinValue+0x66>
 5b4:	59 c0       	rjmp	.+178    	; 0x668 <DIO_enuSetPinValue+0x118>
 5b6:	8d 81       	ldd	r24, Y+5	; 0x05
 5b8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	91 05       	cpc	r25, r1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <DIO_enuSetPinValue+0x72>
 5c0:	7c c0       	rjmp	.+248    	; 0x6ba <DIO_enuSetPinValue+0x16a>
 5c2:	a3 c0       	rjmp	.+326    	; 0x70a <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
 5c4:	ab e3       	ldi	r26, 0x3B	; 59
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	eb e3       	ldi	r30, 0x3B	; 59
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	48 2f       	mov	r20, r24
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_enuSetPinValue+0x90>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	2a 95       	dec	r18
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_enuSetPinValue+0x8c>
 5e4:	80 95       	com	r24
 5e6:	84 23       	and	r24, r20
 5e8:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<Copy_u8PinID);
 5ea:	ab e3       	ldi	r26, 0x3B	; 59
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	eb e3       	ldi	r30, 0x3B	; 59
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	8c 81       	ldd	r24, Y+4	; 0x04
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	b9 01       	movw	r22, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_enuSetPinValue+0xba>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	8a 95       	dec	r24
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_enuSetPinValue+0xb6>
 60e:	cb 01       	movw	r24, r22
 610:	84 2b       	or	r24, r20
 612:	8c 93       	st	X, r24
 614:	7a c0       	rjmp	.+244    	; 0x70a <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
 616:	a8 e3       	ldi	r26, 0x38	; 56
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	e8 e3       	ldi	r30, 0x38	; 56
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	48 2f       	mov	r20, r24
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_enuSetPinValue+0xe2>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	2a 95       	dec	r18
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_enuSetPinValue+0xde>
 636:	80 95       	com	r24
 638:	84 23       	and	r24, r20
 63a:	8c 93       	st	X, r24
				PORTB |=(Copy_u8Value<<Copy_u8PinID);
 63c:	a8 e3       	ldi	r26, 0x38	; 56
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	e8 e3       	ldi	r30, 0x38	; 56
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	48 2f       	mov	r20, r24
 648:	8c 81       	ldd	r24, Y+4	; 0x04
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
 650:	88 2f       	mov	r24, r24
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	b9 01       	movw	r22, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_enuSetPinValue+0x10c>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	8a 95       	dec	r24
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_enuSetPinValue+0x108>
 660:	cb 01       	movw	r24, r22
 662:	84 2b       	or	r24, r20
 664:	8c 93       	st	X, r24
 666:	51 c0       	rjmp	.+162    	; 0x70a <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
 668:	a5 e3       	ldi	r26, 0x35	; 53
 66a:	b0 e0       	ldi	r27, 0x00	; 0
 66c:	e5 e3       	ldi	r30, 0x35	; 53
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	48 2f       	mov	r20, r24
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_enuSetPinValue+0x134>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	2a 95       	dec	r18
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_enuSetPinValue+0x130>
 688:	80 95       	com	r24
 68a:	84 23       	and	r24, r20
 68c:	8c 93       	st	X, r24
				PORTC |=(Copy_u8Value<<Copy_u8PinID);
 68e:	a5 e3       	ldi	r26, 0x35	; 53
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	e5 e3       	ldi	r30, 0x35	; 53
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	48 2f       	mov	r20, r24
 69a:	8c 81       	ldd	r24, Y+4	; 0x04
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	88 2f       	mov	r24, r24
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	b9 01       	movw	r22, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_enuSetPinValue+0x15e>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_enuSetPinValue+0x15a>
 6b2:	cb 01       	movw	r24, r22
 6b4:	84 2b       	or	r24, r20
 6b6:	8c 93       	st	X, r24
 6b8:	28 c0       	rjmp	.+80     	; 0x70a <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
 6ba:	a2 e3       	ldi	r26, 0x32	; 50
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	e2 e3       	ldi	r30, 0x32	; 50
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	48 2f       	mov	r20, r24
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_enuSetPinValue+0x186>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	2a 95       	dec	r18
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_enuSetPinValue+0x182>
 6da:	80 95       	com	r24
 6dc:	84 23       	and	r24, r20
 6de:	8c 93       	st	X, r24
				PORTD |=(Copy_u8Value<<Copy_u8PinID);
 6e0:	a2 e3       	ldi	r26, 0x32	; 50
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	e2 e3       	ldi	r30, 0x32	; 50
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	48 2f       	mov	r20, r24
 6ec:	8c 81       	ldd	r24, Y+4	; 0x04
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	88 2f       	mov	r24, r24
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	b9 01       	movw	r22, r18
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_enuSetPinValue+0x1b0>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	8a 95       	dec	r24
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_enuSetPinValue+0x1ac>
 704:	cb 01       	movw	r24, r22
 706:	84 2b       	or	r24, r20
 708:	8c 93       	st	X, r24
				break;
			}
			 Local_enuErrorstate = ES_OK;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_enuSetPinValue+0x1c4>
	    	  }else
	    	  {
	    		  Local_enuErrorstate = ES_OUT_OF_RANGE;
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	89 83       	std	Y+1, r24	; 0x01
	    	  }
	return Local_enuErrorstate;
 714:	89 81       	ldd	r24, Y+1	; 0x01
}
 716:	26 96       	adiw	r28, 0x06	; 6
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	00 d0       	rcall	.+0      	; 0x72e <DIO_enuTogPin+0x6>
 72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_enuTogPin+0x8>
 730:	0f 92       	push	r0
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	8a 83       	std	Y+2, r24	; 0x02
 738:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
 73a:	19 82       	std	Y+1, r1	; 0x01
	  if (Copy_u8PortID <= DIO_PORTD
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	84 30       	cpi	r24, 0x04	; 4
 740:	08 f0       	brcs	.+2      	; 0x744 <DIO_enuTogPin+0x1c>
 742:	75 c0       	rjmp	.+234    	; 0x82e <DIO_enuTogPin+0x106>
 744:	8b 81       	ldd	r24, Y+3	; 0x03
 746:	88 30       	cpi	r24, 0x08	; 8
 748:	08 f0       	brcs	.+2      	; 0x74c <DIO_enuTogPin+0x24>
 74a:	71 c0       	rjmp	.+226    	; 0x82e <DIO_enuTogPin+0x106>
		   &&Copy_u8PinID <=DIO_PIN7)
	  {
			switch(Copy_u8PortID)
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	3d 83       	std	Y+5, r19	; 0x05
 754:	2c 83       	std	Y+4, r18	; 0x04
 756:	8c 81       	ldd	r24, Y+4	; 0x04
 758:	9d 81       	ldd	r25, Y+5	; 0x05
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	91 05       	cpc	r25, r1
 75e:	49 f1       	breq	.+82     	; 0x7b2 <DIO_enuTogPin+0x8a>
 760:	2c 81       	ldd	r18, Y+4	; 0x04
 762:	3d 81       	ldd	r19, Y+5	; 0x05
 764:	22 30       	cpi	r18, 0x02	; 2
 766:	31 05       	cpc	r19, r1
 768:	2c f4       	brge	.+10     	; 0x774 <DIO_enuTogPin+0x4c>
 76a:	8c 81       	ldd	r24, Y+4	; 0x04
 76c:	9d 81       	ldd	r25, Y+5	; 0x05
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	61 f0       	breq	.+24     	; 0x78a <DIO_enuTogPin+0x62>
 772:	5a c0       	rjmp	.+180    	; 0x828 <DIO_enuTogPin+0x100>
 774:	2c 81       	ldd	r18, Y+4	; 0x04
 776:	3d 81       	ldd	r19, Y+5	; 0x05
 778:	22 30       	cpi	r18, 0x02	; 2
 77a:	31 05       	cpc	r19, r1
 77c:	71 f1       	breq	.+92     	; 0x7da <DIO_enuTogPin+0xb2>
 77e:	8c 81       	ldd	r24, Y+4	; 0x04
 780:	9d 81       	ldd	r25, Y+5	; 0x05
 782:	83 30       	cpi	r24, 0x03	; 3
 784:	91 05       	cpc	r25, r1
 786:	e9 f1       	breq	.+122    	; 0x802 <DIO_enuTogPin+0xda>
 788:	4f c0       	rjmp	.+158    	; 0x828 <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
 78a:	ab e3       	ldi	r26, 0x3B	; 59
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	eb e3       	ldi	r30, 0x3B	; 59
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	80 81       	ld	r24, Z
 794:	48 2f       	mov	r20, r24
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	28 2f       	mov	r18, r24
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	02 2e       	mov	r0, r18
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_enuTogPin+0x80>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	0a 94       	dec	r0
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_enuTogPin+0x7c>
 7ac:	84 27       	eor	r24, r20
 7ae:	8c 93       	st	X, r24
 7b0:	3b c0       	rjmp	.+118    	; 0x828 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
 7b2:	a8 e3       	ldi	r26, 0x38	; 56
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	e8 e3       	ldi	r30, 0x38	; 56
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	48 2f       	mov	r20, r24
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	28 2f       	mov	r18, r24
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	02 2e       	mov	r0, r18
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_enuTogPin+0xa8>
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	0a 94       	dec	r0
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_enuTogPin+0xa4>
 7d4:	84 27       	eor	r24, r20
 7d6:	8c 93       	st	X, r24
 7d8:	27 c0       	rjmp	.+78     	; 0x828 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
 7da:	a5 e3       	ldi	r26, 0x35	; 53
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e5 e3       	ldi	r30, 0x35	; 53
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	48 2f       	mov	r20, r24
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 2e       	mov	r0, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_enuTogPin+0xd0>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	0a 94       	dec	r0
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_enuTogPin+0xcc>
 7fc:	84 27       	eor	r24, r20
 7fe:	8c 93       	st	X, r24
 800:	13 c0       	rjmp	.+38     	; 0x828 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
 802:	a2 e3       	ldi	r26, 0x32	; 50
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e2 e3       	ldi	r30, 0x32	; 50
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	48 2f       	mov	r20, r24
 80e:	8b 81       	ldd	r24, Y+3	; 0x03
 810:	28 2f       	mov	r18, r24
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 2e       	mov	r0, r18
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_enuTogPin+0xf8>
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	0a 94       	dec	r0
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_enuTogPin+0xf4>
 824:	84 27       	eor	r24, r20
 826:	8c 93       	st	X, r24
				break;
			}

		 Local_enuErrorstate = ES_OK;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_enuTogPin+0x10a>
	  }else
	    {
	    	Local_enuErrorstate = ES_OUT_OF_RANGE;
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	89 83       	std	Y+1, r24	; 0x01
	     }
	return Local_enuErrorstate;
 832:	89 81       	ldd	r24, Y+1	; 0x01
}
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	cf 91       	pop	r28
 840:	df 91       	pop	r29
 842:	08 95       	ret

00000844 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID, u8* Copy_Pu8Value )
{
 844:	df 93       	push	r29
 846:	cf 93       	push	r28
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	27 97       	sbiw	r28, 0x07	; 7
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de bf       	out	0x3e, r29	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd bf       	out	0x3d, r28	; 61
 858:	8a 83       	std	Y+2, r24	; 0x02
 85a:	6b 83       	std	Y+3, r22	; 0x03
 85c:	5d 83       	std	Y+5, r21	; 0x05
 85e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
 860:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Pu8Value != NULL)
 862:	8c 81       	ldd	r24, Y+4	; 0x04
 864:	9d 81       	ldd	r25, Y+5	; 0x05
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	09 f4       	brne	.+2      	; 0x86c <__stack+0xd>
 86a:	7e c0       	rjmp	.+252    	; 0x968 <__stack+0x109>
    {
	  if (Copy_u8PortID <= DIO_PORTD
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	84 30       	cpi	r24, 0x04	; 4
 870:	08 f0       	brcs	.+2      	; 0x874 <__stack+0x15>
 872:	77 c0       	rjmp	.+238    	; 0x962 <__stack+0x103>
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	88 30       	cpi	r24, 0x08	; 8
 878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
 87a:	73 c0       	rjmp	.+230    	; 0x962 <__stack+0x103>
		   &&Copy_u8PinID <=DIO_PIN7)
	  {
			switch(Copy_u8PortID)
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	28 2f       	mov	r18, r24
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	3f 83       	std	Y+7, r19	; 0x07
 884:	2e 83       	std	Y+6, r18	; 0x06
 886:	4e 81       	ldd	r20, Y+6	; 0x06
 888:	5f 81       	ldd	r21, Y+7	; 0x07
 88a:	41 30       	cpi	r20, 0x01	; 1
 88c:	51 05       	cpc	r21, r1
 88e:	59 f1       	breq	.+86     	; 0x8e6 <__stack+0x87>
 890:	8e 81       	ldd	r24, Y+6	; 0x06
 892:	9f 81       	ldd	r25, Y+7	; 0x07
 894:	82 30       	cpi	r24, 0x02	; 2
 896:	91 05       	cpc	r25, r1
 898:	34 f4       	brge	.+12     	; 0x8a6 <__stack+0x47>
 89a:	2e 81       	ldd	r18, Y+6	; 0x06
 89c:	3f 81       	ldd	r19, Y+7	; 0x07
 89e:	21 15       	cp	r18, r1
 8a0:	31 05       	cpc	r19, r1
 8a2:	69 f0       	breq	.+26     	; 0x8be <__stack+0x5f>
 8a4:	5b c0       	rjmp	.+182    	; 0x95c <__stack+0xfd>
 8a6:	4e 81       	ldd	r20, Y+6	; 0x06
 8a8:	5f 81       	ldd	r21, Y+7	; 0x07
 8aa:	42 30       	cpi	r20, 0x02	; 2
 8ac:	51 05       	cpc	r21, r1
 8ae:	79 f1       	breq	.+94     	; 0x90e <__stack+0xaf>
 8b0:	8e 81       	ldd	r24, Y+6	; 0x06
 8b2:	9f 81       	ldd	r25, Y+7	; 0x07
 8b4:	83 30       	cpi	r24, 0x03	; 3
 8b6:	91 05       	cpc	r25, r1
 8b8:	09 f4       	brne	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	3d c0       	rjmp	.+122    	; 0x936 <__stack+0xd7>
 8bc:	4f c0       	rjmp	.+158    	; 0x95c <__stack+0xfd>
			{
			case DIO_PORTA:
				*Copy_Pu8Value =((PINA>>Copy_u8PinID)&DIO_MASK_BIT);
 8be:	e9 e3       	ldi	r30, 0x39	; 57
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	28 2f       	mov	r18, r24
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ca:	88 2f       	mov	r24, r24
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	a9 01       	movw	r20, r18
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	55 95       	asr	r21
 8d4:	47 95       	ror	r20
 8d6:	8a 95       	dec	r24
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
 8da:	ca 01       	movw	r24, r20
 8dc:	81 70       	andi	r24, 0x01	; 1
 8de:	ec 81       	ldd	r30, Y+4	; 0x04
 8e0:	fd 81       	ldd	r31, Y+5	; 0x05
 8e2:	80 83       	st	Z, r24
 8e4:	3b c0       	rjmp	.+118    	; 0x95c <__stack+0xfd>
				break;
			case DIO_PORTB:
				*Copy_Pu8Value =((PINB>>Copy_u8PinID)&DIO_MASK_BIT);
 8e6:	e6 e3       	ldi	r30, 0x36	; 54
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	28 2f       	mov	r18, r24
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	8b 81       	ldd	r24, Y+3	; 0x03
 8f2:	88 2f       	mov	r24, r24
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	a9 01       	movw	r20, r18
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
 8fa:	55 95       	asr	r21
 8fc:	47 95       	ror	r20
 8fe:	8a 95       	dec	r24
 900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
 902:	ca 01       	movw	r24, r20
 904:	81 70       	andi	r24, 0x01	; 1
 906:	ec 81       	ldd	r30, Y+4	; 0x04
 908:	fd 81       	ldd	r31, Y+5	; 0x05
 90a:	80 83       	st	Z, r24
 90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
				break;
			case DIO_PORTC:
				*Copy_Pu8Value =((PINC>>Copy_u8PinID)&DIO_MASK_BIT);
 90e:	e3 e3       	ldi	r30, 0x33	; 51
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	28 2f       	mov	r18, r24
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	8b 81       	ldd	r24, Y+3	; 0x03
 91a:	88 2f       	mov	r24, r24
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	a9 01       	movw	r20, r18
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
 922:	55 95       	asr	r21
 924:	47 95       	ror	r20
 926:	8a 95       	dec	r24
 928:	e2 f7       	brpl	.-8      	; 0x922 <__stack+0xc3>
 92a:	ca 01       	movw	r24, r20
 92c:	81 70       	andi	r24, 0x01	; 1
 92e:	ec 81       	ldd	r30, Y+4	; 0x04
 930:	fd 81       	ldd	r31, Y+5	; 0x05
 932:	80 83       	st	Z, r24
 934:	13 c0       	rjmp	.+38     	; 0x95c <__stack+0xfd>
				break;
			case DIO_PORTD:
				*Copy_Pu8Value =((PIND>>Copy_u8PinID)&DIO_MASK_BIT);
 936:	e0 e3       	ldi	r30, 0x30	; 48
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	28 2f       	mov	r18, r24
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	a9 01       	movw	r20, r18
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0xef>
 94a:	55 95       	asr	r21
 94c:	47 95       	ror	r20
 94e:	8a 95       	dec	r24
 950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0xeb>
 952:	ca 01       	movw	r24, r20
 954:	81 70       	andi	r24, 0x01	; 1
 956:	ec 81       	ldd	r30, Y+4	; 0x04
 958:	fd 81       	ldd	r31, Y+5	; 0x05
 95a:	80 83       	st	Z, r24
				break;
			}

		 Local_enuErrorstate = ES_OK;
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x10d>
	  }else
	    {
	    	Local_enuErrorstate = ES_OUT_OF_RANGE;
 962:	83 e0       	ldi	r24, 0x03	; 3
 964:	89 83       	std	Y+1, r24	; 0x01
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
	     }
    }else
    {
  	  Local_enuErrorstate = ES_NULL_POINTER;
 968:	82 e0       	ldi	r24, 0x02	; 2
 96a:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_enuErrorstate;
 96c:	89 81       	ldd	r24, Y+1	; 0x01
}
 96e:	27 96       	adiw	r28, 0x07	; 7
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	f8 94       	cli
 974:	de bf       	out	0x3e, r29	; 62
 976:	0f be       	out	0x3f, r0	; 63
 978:	cd bf       	out	0x3d, r28	; 61
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	08 95       	ret

00000980 <Switch_enuInit>:

#include "switch_config.h"


ES_t Switch_enuInit(SW_t* copy_pAStrSwitch)
{
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	00 d0       	rcall	.+0      	; 0x986 <Switch_enuInit+0x6>
 986:	00 d0       	rcall	.+0      	; 0x988 <Switch_enuInit+0x8>
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	9c 83       	std	Y+4, r25	; 0x04
 98e:	8b 83       	std	Y+3, r24	; 0x03

		ES_t Local_enuErorrState =ES_NOK;
 990:	1a 82       	std	Y+2, r1	; 0x02
  u8 Local_u8Interator;
  if(copy_pAStrSwitch!=NULL)
 992:	8b 81       	ldd	r24, Y+3	; 0x03
 994:	9c 81       	ldd	r25, Y+4	; 0x04
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	09 f4       	brne	.+2      	; 0x99c <Switch_enuInit+0x1c>
 99a:	5c c0       	rjmp	.+184    	; 0xa54 <Switch_enuInit+0xd4>
  {
  for(Local_u8Interator=0;Local_u8Interator<SW_NUM;Local_u8Interator++)
 99c:	19 82       	std	Y+1, r1	; 0x01
 99e:	55 c0       	rjmp	.+170    	; 0xa4a <Switch_enuInit+0xca>
  {
	  Local_enuErorrState= DIO_enuSetPinDirection(copy_pAStrSwitch[Local_u8Interator].SW_u8PortID,copy_pAStrSwitch[Local_u8Interator].SW_u8PinID,DIO_u8INPUT);
 9a0:	89 81       	ldd	r24, Y+1	; 0x01
 9a2:	28 2f       	mov	r18, r24
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	c9 01       	movw	r24, r18
 9a8:	88 0f       	add	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	28 0f       	add	r18, r24
 9ae:	39 1f       	adc	r19, r25
 9b0:	8b 81       	ldd	r24, Y+3	; 0x03
 9b2:	9c 81       	ldd	r25, Y+4	; 0x04
 9b4:	fc 01       	movw	r30, r24
 9b6:	e2 0f       	add	r30, r18
 9b8:	f3 1f       	adc	r31, r19
 9ba:	40 81       	ld	r20, Z
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	28 2f       	mov	r18, r24
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	c9 01       	movw	r24, r18
 9c4:	88 0f       	add	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	28 0f       	add	r18, r24
 9ca:	39 1f       	adc	r19, r25
 9cc:	8b 81       	ldd	r24, Y+3	; 0x03
 9ce:	9c 81       	ldd	r25, Y+4	; 0x04
 9d0:	fc 01       	movw	r30, r24
 9d2:	e2 0f       	add	r30, r18
 9d4:	f3 1f       	adc	r31, r19
 9d6:	91 81       	ldd	r25, Z+1	; 0x01
 9d8:	84 2f       	mov	r24, r20
 9da:	69 2f       	mov	r22, r25
 9dc:	40 e0       	ldi	r20, 0x00	; 0
 9de:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_enuSetPinDirection>
 9e2:	8a 83       	std	Y+2, r24	; 0x02
	  Local_enuErorrState= DIO_enuSetPinValue(copy_pAStrSwitch[Local_u8Interator].SW_u8PortID,copy_pAStrSwitch[Local_u8Interator].SW_u8PinID,copy_pAStrSwitch[Local_u8Interator].SW_u8Status);
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	28 2f       	mov	r18, r24
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	c9 01       	movw	r24, r18
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	28 0f       	add	r18, r24
 9f2:	39 1f       	adc	r19, r25
 9f4:	8b 81       	ldd	r24, Y+3	; 0x03
 9f6:	9c 81       	ldd	r25, Y+4	; 0x04
 9f8:	fc 01       	movw	r30, r24
 9fa:	e2 0f       	add	r30, r18
 9fc:	f3 1f       	adc	r31, r19
 9fe:	50 81       	ld	r21, Z
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	28 2f       	mov	r18, r24
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	c9 01       	movw	r24, r18
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	28 0f       	add	r18, r24
 a0e:	39 1f       	adc	r19, r25
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	9c 81       	ldd	r25, Y+4	; 0x04
 a14:	fc 01       	movw	r30, r24
 a16:	e2 0f       	add	r30, r18
 a18:	f3 1f       	adc	r31, r19
 a1a:	41 81       	ldd	r20, Z+1	; 0x01
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	28 2f       	mov	r18, r24
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	c9 01       	movw	r24, r18
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	28 0f       	add	r18, r24
 a2a:	39 1f       	adc	r19, r25
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	9c 81       	ldd	r25, Y+4	; 0x04
 a30:	fc 01       	movw	r30, r24
 a32:	e2 0f       	add	r30, r18
 a34:	f3 1f       	adc	r31, r19
 a36:	92 81       	ldd	r25, Z+2	; 0x02
 a38:	85 2f       	mov	r24, r21
 a3a:	64 2f       	mov	r22, r20
 a3c:	49 2f       	mov	r20, r25
 a3e:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_enuSetPinValue>
 a42:	8a 83       	std	Y+2, r24	; 0x02

		ES_t Local_enuErorrState =ES_NOK;
  u8 Local_u8Interator;
  if(copy_pAStrSwitch!=NULL)
  {
  for(Local_u8Interator=0;Local_u8Interator<SW_NUM;Local_u8Interator++)
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	89 83       	std	Y+1, r24	; 0x01
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	08 f4       	brcc	.+2      	; 0xa52 <Switch_enuInit+0xd2>
 a50:	a7 cf       	rjmp	.-178    	; 0x9a0 <Switch_enuInit+0x20>
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <Switch_enuInit+0xd8>
	  Local_enuErorrState= DIO_enuSetPinDirection(copy_pAStrSwitch[Local_u8Interator].SW_u8PortID,copy_pAStrSwitch[Local_u8Interator].SW_u8PinID,DIO_u8INPUT);
	  Local_enuErorrState= DIO_enuSetPinValue(copy_pAStrSwitch[Local_u8Interator].SW_u8PortID,copy_pAStrSwitch[Local_u8Interator].SW_u8PinID,copy_pAStrSwitch[Local_u8Interator].SW_u8Status);
  }
  }else
  {
	  Local_enuErorrState =ES_NULL_POINTER;
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	8a 83       	std	Y+2, r24	; 0x02
  }
		return Local_enuErorrState;
 a58:	8a 81       	ldd	r24, Y+2	; 0x02

}
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	0f 90       	pop	r0
 a60:	0f 90       	pop	r0
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	08 95       	ret

00000a68 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t* copy_pAStrSwitch,u8* copy_pu8SwState ){
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	00 d0       	rcall	.+0      	; 0xa6e <Switch_enuGetState+0x6>
 a6e:	00 d0       	rcall	.+0      	; 0xa70 <Switch_enuGetState+0x8>
 a70:	0f 92       	push	r0
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	9b 83       	std	Y+3, r25	; 0x03
 a78:	8a 83       	std	Y+2, r24	; 0x02
 a7a:	7d 83       	std	Y+5, r23	; 0x05
 a7c:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErorrState =ES_NOK;
 a7e:	19 82       	std	Y+1, r1	; 0x01

	  if(copy_pAStrSwitch!=NULL &&copy_pu8SwState!=NULL)
 a80:	8a 81       	ldd	r24, Y+2	; 0x02
 a82:	9b 81       	ldd	r25, Y+3	; 0x03
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	91 f0       	breq	.+36     	; 0xaac <Switch_enuGetState+0x44>
 a88:	8c 81       	ldd	r24, Y+4	; 0x04
 a8a:	9d 81       	ldd	r25, Y+5	; 0x05
 a8c:	00 97       	sbiw	r24, 0x00	; 0
 a8e:	71 f0       	breq	.+28     	; 0xaac <Switch_enuGetState+0x44>
	  {
		  Local_enuErorrState=DIO_enuGetPinValue(copy_pAStrSwitch->SW_u8PortID,copy_pAStrSwitch->SW_u8PinID, copy_pu8SwState);
 a90:	ea 81       	ldd	r30, Y+2	; 0x02
 a92:	fb 81       	ldd	r31, Y+3	; 0x03
 a94:	80 81       	ld	r24, Z
 a96:	ea 81       	ldd	r30, Y+2	; 0x02
 a98:	fb 81       	ldd	r31, Y+3	; 0x03
 a9a:	91 81       	ldd	r25, Z+1	; 0x01
 a9c:	2c 81       	ldd	r18, Y+4	; 0x04
 a9e:	3d 81       	ldd	r19, Y+5	; 0x05
 aa0:	69 2f       	mov	r22, r25
 aa2:	a9 01       	movw	r20, r18
 aa4:	0e 94 22 04 	call	0x844	; 0x844 <DIO_enuGetPinValue>
 aa8:	89 83       	std	Y+1, r24	; 0x01
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <Switch_enuGetState+0x48>
	  }else
	  {
		  Local_enuErorrState =ES_NULL_POINTER;
 aac:	82 e0       	ldi	r24, 0x02	; 2
 aae:	89 83       	std	Y+1, r24	; 0x01
	  }

	return Local_enuErorrState;
 ab0:	89 81       	ldd	r24, Y+1	; 0x01

}
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	cf 91       	pop	r28
 abe:	df 91       	pop	r29
 ac0:	08 95       	ret

00000ac2 <main>:
#include "../HAL/SWITCH/switch_config.h"
#include "../HAL/SWITCH/switch_int.h"

extern SW_t Switch_AStrSwitchState[SW_NUM];

int main(void){
 ac2:	df 93       	push	r29
 ac4:	cf 93       	push	r28
 ac6:	0f 92       	push	r0
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62
   u8 pinstate;
		DIO_enuInit();
 acc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
		Switch_enuInit(Switch_AStrSwitchState);
 ad0:	80 e6       	ldi	r24, 0x60	; 96
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 c0 04 	call	0x980	; 0x980 <Switch_enuInit>
  while(1){
	  Switch_enuGetState(&Switch_AStrSwitchState[2],&pinstate);
 ad8:	86 e6       	ldi	r24, 0x66	; 102
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	9e 01       	movw	r18, r28
 ade:	2f 5f       	subi	r18, 0xFF	; 255
 ae0:	3f 4f       	sbci	r19, 0xFF	; 255
 ae2:	b9 01       	movw	r22, r18
 ae4:	0e 94 34 05 	call	0xa68	; 0xa68 <Switch_enuGetState>
	  if(pinstate == 0){
 ae8:	89 81       	ldd	r24, Y+1	; 0x01
 aea:	88 23       	and	r24, r24
 aec:	31 f4       	brne	.+12     	; 0xafa <main+0x38>
		  DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8HIGH);
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	62 e0       	ldi	r22, 0x02	; 2
 af2:	41 e0       	ldi	r20, 0x01	; 1
 af4:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_enuSetPinValue>
 af8:	ef cf       	rjmp	.-34     	; 0xad8 <main+0x16>
	  }else
	  {
		  DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8LOW);
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	62 e0       	ldi	r22, 0x02	; 2
 afe:	40 e0       	ldi	r20, 0x00	; 0
 b00:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_enuSetPinValue>
 b04:	e9 cf       	rjmp	.-46     	; 0xad8 <main+0x16>

00000b06 <_exit>:
 b06:	f8 94       	cli

00000b08 <__stop_program>:
 b08:	ff cf       	rjmp	.-2      	; 0xb08 <__stop_program>
