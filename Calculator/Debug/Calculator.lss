
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000022c4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008a  0080008a  00002382  2**0
                  ALLOC
  3 .stab         00001f8c  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf2  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005002  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005142  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000052b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000974f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 11 	call	0x2228	; 0x2228 <main>
      8a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate= ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f e0       	ldi	r24, 0x0F	; 15
     b58:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f e0       	ldi	r24, 0x0F	; 15
     b68:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8a e4       	ldi	r24, 0x4A	; 74
     b70:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b7a:	e8 e3       	ldi	r30, 0x38	; 56
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b80:	e5 e3       	ldi	r30, 0x35	; 53
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	89 e9       	ldi	r24, 0x99	; 153
     b8e:	80 83       	st	Z, r24

	 Local_enuErrorstate = ES_OK;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <DIO_enuSetPortDirection>:
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value )
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_enuSetPortDirection+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_enuSetPortDirection+0x8>
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate= ES_NOK ;
     bb0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	a8 f5       	brcc	.+106    	; 0xc22 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3d 83       	std	Y+5, r19	; 0x05
     bc0:	2c 83       	std	Y+4, r18	; 0x04
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	d1 f0       	breq	.+52     	; 0xc00 <DIO_enuSetPortDirection+0x62>
     bcc:	2c 81       	ldd	r18, Y+4	; 0x04
     bce:	3d 81       	ldd	r19, Y+5	; 0x05
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_enuSetPortDirection+0x42>
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <DIO_enuSetPortDirection+0x58>
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
     be0:	2c 81       	ldd	r18, Y+4	; 0x04
     be2:	3d 81       	ldd	r19, Y+5	; 0x05
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <DIO_enuSetPortDirection+0x6c>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <DIO_enuSetPortDirection+0x76>
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     bf6:	ea e3       	ldi	r30, 0x3A	; 58
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	80 83       	st	Z, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	80 83       	st	Z, r24
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	80 83       	st	Z, r24
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     c14:	e1 e3       	ldi	r30, 0x31	; 49
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate = ES_OK;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		 Local_enuErrorstate = ES_OUT_OF_RANGE;
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value )
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_enuSetPortValue+0x6>
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_enuSetPortValue+0x8>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     c4a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	a8 f5       	brcc	.+106    	; 0xcbc <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3d 83       	std	Y+5, r19	; 0x05
     c5a:	2c 83       	std	Y+4, r18	; 0x04
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	d1 f0       	breq	.+52     	; 0xc9a <DIO_enuSetPortValue+0x62>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_enuSetPortValue+0x42>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	61 f0       	breq	.+24     	; 0xc90 <DIO_enuSetPortValue+0x58>
     c78:	1e c0       	rjmp	.+60     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <DIO_enuSetPortValue+0x6c>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	81 f0       	breq	.+32     	; 0xcae <DIO_enuSetPortValue+0x76>
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
     c90:	eb e3       	ldi	r30, 0x3B	; 59
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
     c98:	0e c0       	rjmp	.+28     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
     c9a:	e8 e3       	ldi	r30, 0x38	; 56
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
     ca4:	e5 e3       	ldi	r30, 0x35	; 53
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	80 83       	st	Z, r24
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
     cae:	e2 e3       	ldi	r30, 0x32	; 50
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate = ES_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		 Local_enuErrorstate = ES_OUT_OF_RANGE;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID )
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <DIO_enuTogPort+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <DIO_enuTogPort+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     ce0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	08 f0       	brcs	.+2      	; 0xcea <DIO_enuTogPort+0x18>
     ce8:	41 c0       	rjmp	.+130    	; 0xd6c <DIO_enuTogPort+0x9a>
	{
		switch(Copy_u8PortID)
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3c 83       	std	Y+4, r19	; 0x04
     cf2:	2b 83       	std	Y+3, r18	; 0x03
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f0       	breq	.+58     	; 0xd38 <DIO_enuTogPort+0x66>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <DIO_enuTogPort+0x40>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	61 f0       	breq	.+24     	; 0xd28 <DIO_enuTogPort+0x56>
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <DIO_enuTogPort+0x94>
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	b1 f0       	breq	.+44     	; 0xd48 <DIO_enuTogPort+0x76>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	c9 f0       	breq	.+50     	; 0xd58 <DIO_enuTogPort+0x86>
     d26:	1f c0       	rjmp	.+62     	; 0xd66 <DIO_enuTogPort+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
     d28:	ab e3       	ldi	r26, 0x3B	; 59
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	eb e3       	ldi	r30, 0x3B	; 59
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 95       	com	r24
     d34:	8c 93       	st	X, r24
     d36:	17 c0       	rjmp	.+46     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
     d38:	a8 e3       	ldi	r26, 0x38	; 56
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e8 e3       	ldi	r30, 0x38	; 56
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 95       	com	r24
     d44:	8c 93       	st	X, r24
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
     d48:	a5 e3       	ldi	r26, 0x35	; 53
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 95       	com	r24
     d54:	8c 93       	st	X, r24
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <DIO_enuTogPort+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
     d58:	a2 e3       	ldi	r26, 0x32	; 50
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e2 e3       	ldi	r30, 0x32	; 50
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 95       	com	r24
     d64:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate = ES_OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_enuTogPort+0x9e>
	}
	else
	{
		 Local_enuErrorstate = ES_OUT_OF_RANGE;
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8* Copy_Pu8Value )
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <DIO_enuGetPortValue+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <DIO_enuGetPortValue+0x8>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <DIO_enuGetPortValue+0xa>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	7c 83       	std	Y+4, r23	; 0x04
     d92:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     d94:	19 82       	std	Y+1, r1	; 0x01
      if(Copy_Pu8Value != NULL)
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	09 f4       	brne	.+2      	; 0xda0 <DIO_enuGetPortValue+0x20>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <DIO_enuGetPortValue+0xa6>
      {
    	  if (Copy_u8PortID <= DIO_PORTD)
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	e8 f5       	brcc	.+122    	; 0xe20 <DIO_enuGetPortValue+0xa0>
    	  {
    			switch(Copy_u8PortID)
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3e 83       	std	Y+6, r19	; 0x06
     dae:	2d 83       	std	Y+5, r18	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	e1 f0       	breq	.+56     	; 0xdf2 <DIO_enuGetPortValue+0x72>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_enuGetPortValue+0x4e>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <DIO_enuGetPortValue+0x64>
     dcc:	26 c0       	rjmp	.+76     	; 0xe1a <DIO_enuGetPortValue+0x9a>
     dce:	2d 81       	ldd	r18, Y+5	; 0x05
     dd0:	3e 81       	ldd	r19, Y+6	; 0x06
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	a1 f0       	breq	.+40     	; 0xe00 <DIO_enuGetPortValue+0x80>
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	b1 f0       	breq	.+44     	; 0xe0e <DIO_enuGetPortValue+0x8e>
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <DIO_enuGetPortValue+0x9a>
    			{
    			case DIO_PORTA:
    				*Copy_Pu8Value = PINA;
     de4:	e9 e3       	ldi	r30, 0x39	; 57
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <DIO_enuGetPortValue+0x9a>
    				break;
    			case DIO_PORTB:
    				*Copy_Pu8Value = PINB;
     df2:	e6 e3       	ldi	r30, 0x36	; 54
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 83       	st	Z, r24
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <DIO_enuGetPortValue+0x9a>
    				break;
    			case DIO_PORTC:
    				*Copy_Pu8Value = PINC;
     e00:	e3 e3       	ldi	r30, 0x33	; 51
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <DIO_enuGetPortValue+0x9a>
    				break;
    			case DIO_PORTD:
    				*Copy_Pu8Value = PIND;
     e0e:	e0 e3       	ldi	r30, 0x30	; 48
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	80 83       	st	Z, r24
    				break;
    			}
    			 Local_enuErrorstate = ES_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <DIO_enuGetPortValue+0xaa>
    	  }else
    	  {
    		  Local_enuErrorstate = ES_OUT_OF_RANGE;
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_enuGetPortValue+0xaa>
    	  }
      }else
      {
    	  Local_enuErrorstate = ES_NULL_POINTER;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	89 83       	std	Y+1, r24	; 0x01
      }
	return Local_enuErrorstate;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2c:	26 96       	adiw	r28, 0x06	; 6
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID, u8 Copy_u8Value )
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_enuSetPinDirection+0x6>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_enuSetPinDirection+0x8>
     e46:	00 d0       	rcall	.+0      	; 0xe48 <DIO_enuSetPinDirection+0xa>
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	6b 83       	std	Y+3, r22	; 0x03
     e50:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
     e52:	19 82       	std	Y+1, r1	; 0x01
	  if (Copy_u8PortID <= DIO_PORTD &&
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	08 f0       	brcs	.+2      	; 0xe5c <DIO_enuSetPinDirection+0x1e>
     e5a:	d1 c0       	rjmp	.+418    	; 0xffe <DIO_enuSetPinDirection+0x1c0>
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	08 f0       	brcs	.+2      	; 0xe64 <DIO_enuSetPinDirection+0x26>
     e62:	cd c0       	rjmp	.+410    	; 0xffe <DIO_enuSetPinDirection+0x1c0>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	08 f0       	brcs	.+2      	; 0xe6c <DIO_enuSetPinDirection+0x2e>
     e6a:	c9 c0       	rjmp	.+402    	; 0xffe <DIO_enuSetPinDirection+0x1c0>
			  Copy_u8PinID <=DIO_PIN7 &&
			  Copy_u8Value <= OUTPUT)
	    	  {
			switch(Copy_u8PortID)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3e 83       	std	Y+6, r19	; 0x06
     e74:	2d 83       	std	Y+5, r18	; 0x05
     e76:	6d 81       	ldd	r22, Y+5	; 0x05
     e78:	7e 81       	ldd	r23, Y+6	; 0x06
     e7a:	61 30       	cpi	r22, 0x01	; 1
     e7c:	71 05       	cpc	r23, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <DIO_enuSetPinDirection+0x44>
     e80:	41 c0       	rjmp	.+130    	; 0xf04 <DIO_enuSetPinDirection+0xc6>
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	91 05       	cpc	r25, r1
     e8a:	34 f4       	brge	.+12     	; 0xe98 <DIO_enuSetPinDirection+0x5a>
     e8c:	2d 81       	ldd	r18, Y+5	; 0x05
     e8e:	3e 81       	ldd	r19, Y+6	; 0x06
     e90:	21 15       	cp	r18, r1
     e92:	31 05       	cpc	r19, r1
     e94:	71 f0       	breq	.+28     	; 0xeb2 <DIO_enuSetPinDirection+0x74>
     e96:	b0 c0       	rjmp	.+352    	; 0xff8 <DIO_enuSetPinDirection+0x1ba>
     e98:	6d 81       	ldd	r22, Y+5	; 0x05
     e9a:	7e 81       	ldd	r23, Y+6	; 0x06
     e9c:	62 30       	cpi	r22, 0x02	; 2
     e9e:	71 05       	cpc	r23, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <DIO_enuSetPinDirection+0x66>
     ea2:	59 c0       	rjmp	.+178    	; 0xf56 <DIO_enuSetPinDirection+0x118>
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_enuSetPinDirection+0x72>
     eae:	7c c0       	rjmp	.+248    	; 0xfa8 <DIO_enuSetPinDirection+0x16a>
     eb0:	a3 c0       	rjmp	.+326    	; 0xff8 <DIO_enuSetPinDirection+0x1ba>
			{
			case DIO_PORTA:
				DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
     eb2:	aa e3       	ldi	r26, 0x3A	; 58
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e3       	ldi	r30, 0x3A	; 58
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_enuSetPinDirection+0x90>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	2a 95       	dec	r18
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_enuSetPinDirection+0x8c>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
				DDRA |=(Copy_u8Value<<Copy_u8PinID);
     ed8:	aa e3       	ldi	r26, 0x3A	; 58
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	b9 01       	movw	r22, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_enuSetPinDirection+0xba>
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	8a 95       	dec	r24
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_enuSetPinDirection+0xb6>
     efc:	cb 01       	movw	r24, r22
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	7a c0       	rjmp	.+244    	; 0xff8 <DIO_enuSetPinDirection+0x1ba>
				break;
			case DIO_PORTB:
				DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
     f04:	a7 e3       	ldi	r26, 0x37	; 55
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e7 e3       	ldi	r30, 0x37	; 55
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_enuSetPinDirection+0xe2>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	2a 95       	dec	r18
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_enuSetPinDirection+0xde>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
				DDRB |=(Copy_u8Value<<Copy_u8PinID);
     f2a:	a7 e3       	ldi	r26, 0x37	; 55
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e3       	ldi	r30, 0x37	; 55
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	b9 01       	movw	r22, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_enuSetPinDirection+0x10c>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	8a 95       	dec	r24
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_enuSetPinDirection+0x108>
     f4e:	cb 01       	movw	r24, r22
     f50:	84 2b       	or	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	51 c0       	rjmp	.+162    	; 0xff8 <DIO_enuSetPinDirection+0x1ba>
				break;
			case DIO_PORTC:
				DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
     f56:	a4 e3       	ldi	r26, 0x34	; 52
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e4 e3       	ldi	r30, 0x34	; 52
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_enuSetPinDirection+0x134>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	2a 95       	dec	r18
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_enuSetPinDirection+0x130>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
				DDRC |=(Copy_u8Value<<Copy_u8PinID);
     f7c:	a4 e3       	ldi	r26, 0x34	; 52
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e4 e3       	ldi	r30, 0x34	; 52
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	b9 01       	movw	r22, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_enuSetPinDirection+0x15e>
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_enuSetPinDirection+0x15a>
     fa0:	cb 01       	movw	r24, r22
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	28 c0       	rjmp	.+80     	; 0xff8 <DIO_enuSetPinDirection+0x1ba>
				break;
			case DIO_PORTD:
				DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
     fa8:	a1 e3       	ldi	r26, 0x31	; 49
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e1 e3       	ldi	r30, 0x31	; 49
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_enuSetPinDirection+0x186>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	2a 95       	dec	r18
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_enuSetPinDirection+0x182>
     fc8:	80 95       	com	r24
     fca:	84 23       	and	r24, r20
     fcc:	8c 93       	st	X, r24
				DDRD |=(Copy_u8Value<<Copy_u8PinID);
     fce:	a1 e3       	ldi	r26, 0x31	; 49
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e3       	ldi	r30, 0x31	; 49
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	b9 01       	movw	r22, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_enuSetPinDirection+0x1b0>
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_enuSetPinDirection+0x1ac>
     ff2:	cb 01       	movw	r24, r22
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
				break;
			}
			 Local_enuErrorstate = ES_OK;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuSetPinDirection+0x1c4>
	    	  }else
	    	  {
	    		  Local_enuErrorstate = ES_OUT_OF_RANGE;
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	89 83       	std	Y+1, r24	; 0x01
	    	  }
	return Local_enuErrorstate;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
}
    1004:	26 96       	adiw	r28, 0x06	; 6
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID, u8 Copy_u8Value )
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <DIO_enuSetPinValue+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <DIO_enuSetPinValue+0x8>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <DIO_enuSetPinValue+0xa>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	6b 83       	std	Y+3, r22	; 0x03
    1028:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    102a:	19 82       	std	Y+1, r1	; 0x01
	  if (Copy_u8PortID <= DIO_PORTD &&
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	08 f0       	brcs	.+2      	; 0x1034 <DIO_enuSetPinValue+0x1e>
    1032:	d1 c0       	rjmp	.+418    	; 0x11d6 <DIO_enuSetPinValue+0x1c0>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	88 30       	cpi	r24, 0x08	; 8
    1038:	08 f0       	brcs	.+2      	; 0x103c <DIO_enuSetPinValue+0x26>
    103a:	cd c0       	rjmp	.+410    	; 0x11d6 <DIO_enuSetPinValue+0x1c0>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	08 f0       	brcs	.+2      	; 0x1044 <DIO_enuSetPinValue+0x2e>
    1042:	c9 c0       	rjmp	.+402    	; 0x11d6 <DIO_enuSetPinValue+0x1c0>
			  Copy_u8PinID <=DIO_PIN7 &&
			  Copy_u8Value <= OUTPUT)
	    	  {
			switch(Copy_u8PortID)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3e 83       	std	Y+6, r19	; 0x06
    104c:	2d 83       	std	Y+5, r18	; 0x05
    104e:	6d 81       	ldd	r22, Y+5	; 0x05
    1050:	7e 81       	ldd	r23, Y+6	; 0x06
    1052:	61 30       	cpi	r22, 0x01	; 1
    1054:	71 05       	cpc	r23, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO_enuSetPinValue+0x44>
    1058:	41 c0       	rjmp	.+130    	; 0x10dc <DIO_enuSetPinValue+0xc6>
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	91 05       	cpc	r25, r1
    1062:	34 f4       	brge	.+12     	; 0x1070 <DIO_enuSetPinValue+0x5a>
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	21 15       	cp	r18, r1
    106a:	31 05       	cpc	r19, r1
    106c:	71 f0       	breq	.+28     	; 0x108a <DIO_enuSetPinValue+0x74>
    106e:	b0 c0       	rjmp	.+352    	; 0x11d0 <DIO_enuSetPinValue+0x1ba>
    1070:	6d 81       	ldd	r22, Y+5	; 0x05
    1072:	7e 81       	ldd	r23, Y+6	; 0x06
    1074:	62 30       	cpi	r22, 0x02	; 2
    1076:	71 05       	cpc	r23, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <DIO_enuSetPinValue+0x66>
    107a:	59 c0       	rjmp	.+178    	; 0x112e <DIO_enuSetPinValue+0x118>
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <DIO_enuSetPinValue+0x72>
    1086:	7c c0       	rjmp	.+248    	; 0x1180 <DIO_enuSetPinValue+0x16a>
    1088:	a3 c0       	rjmp	.+326    	; 0x11d0 <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    108a:	ab e3       	ldi	r26, 0x3B	; 59
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	eb e3       	ldi	r30, 0x3B	; 59
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_enuSetPinValue+0x90>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	2a 95       	dec	r18
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_enuSetPinValue+0x8c>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value<<Copy_u8PinID);
    10b0:	ab e3       	ldi	r26, 0x3B	; 59
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	eb e3       	ldi	r30, 0x3B	; 59
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b9 01       	movw	r22, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enuSetPinValue+0xba>
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enuSetPinValue+0xb6>
    10d4:	cb 01       	movw	r24, r22
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	7a c0       	rjmp	.+244    	; 0x11d0 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    10dc:	a8 e3       	ldi	r26, 0x38	; 56
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e8 e3       	ldi	r30, 0x38	; 56
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_enuSetPinValue+0xe2>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	2a 95       	dec	r18
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_enuSetPinValue+0xde>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
				PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1102:	a8 e3       	ldi	r26, 0x38	; 56
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b9 01       	movw	r22, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_enuSetPinValue+0x10c>
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	8a 95       	dec	r24
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_enuSetPinValue+0x108>
    1126:	cb 01       	movw	r24, r22
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	51 c0       	rjmp	.+162    	; 0x11d0 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    112e:	a5 e3       	ldi	r26, 0x35	; 53
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e3       	ldi	r30, 0x35	; 53
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_enuSetPinValue+0x134>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	2a 95       	dec	r18
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_enuSetPinValue+0x130>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
				PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	b9 01       	movw	r22, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_enuSetPinValue+0x15e>
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_enuSetPinValue+0x15a>
    1178:	cb 01       	movw	r24, r22
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	28 c0       	rjmp	.+80     	; 0x11d0 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1180:	a2 e3       	ldi	r26, 0x32	; 50
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e2 e3       	ldi	r30, 0x32	; 50
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_enuSetPinValue+0x186>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	2a 95       	dec	r18
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_enuSetPinValue+0x182>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
				PORTD |=(Copy_u8Value<<Copy_u8PinID);
    11a6:	a2 e3       	ldi	r26, 0x32	; 50
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e2 e3       	ldi	r30, 0x32	; 50
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	b9 01       	movw	r22, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_enuSetPinValue+0x1b0>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_enuSetPinValue+0x1ac>
    11ca:	cb 01       	movw	r24, r22
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
				break;
			}
			 Local_enuErrorstate = ES_OK;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_enuSetPinValue+0x1c4>
	    	  }else
	    	  {
	    		  Local_enuErrorstate = ES_OUT_OF_RANGE;
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	89 83       	std	Y+1, r24	; 0x01
	    	  }
	return Local_enuErrorstate;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
}
    11dc:	26 96       	adiw	r28, 0x06	; 6
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_enuTogPin+0x6>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_enuTogPin+0x8>
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1200:	19 82       	std	Y+1, r1	; 0x01
	  if (Copy_u8PortID <= DIO_PORTD
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	08 f0       	brcs	.+2      	; 0x120a <DIO_enuTogPin+0x1c>
    1208:	75 c0       	rjmp	.+234    	; 0x12f4 <DIO_enuTogPin+0x106>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 30       	cpi	r24, 0x08	; 8
    120e:	08 f0       	brcs	.+2      	; 0x1212 <DIO_enuTogPin+0x24>
    1210:	71 c0       	rjmp	.+226    	; 0x12f4 <DIO_enuTogPin+0x106>
		   &&Copy_u8PinID <=DIO_PIN7)
	  {
			switch(Copy_u8PortID)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3d 83       	std	Y+5, r19	; 0x05
    121a:	2c 83       	std	Y+4, r18	; 0x04
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	49 f1       	breq	.+82     	; 0x1278 <DIO_enuTogPin+0x8a>
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	2c f4       	brge	.+10     	; 0x123a <DIO_enuTogPin+0x4c>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	61 f0       	breq	.+24     	; 0x1250 <DIO_enuTogPin+0x62>
    1238:	5a c0       	rjmp	.+180    	; 0x12ee <DIO_enuTogPin+0x100>
    123a:	2c 81       	ldd	r18, Y+4	; 0x04
    123c:	3d 81       	ldd	r19, Y+5	; 0x05
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	71 f1       	breq	.+92     	; 0x12a0 <DIO_enuTogPin+0xb2>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	e9 f1       	breq	.+122    	; 0x12c8 <DIO_enuTogPin+0xda>
    124e:	4f c0       	rjmp	.+158    	; 0x12ee <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1250:	ab e3       	ldi	r26, 0x3B	; 59
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_enuTogPin+0x80>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_enuTogPin+0x7c>
    1272:	84 27       	eor	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	3b c0       	rjmp	.+118    	; 0x12ee <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1278:	a8 e3       	ldi	r26, 0x38	; 56
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_enuTogPin+0xa8>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_enuTogPin+0xa4>
    129a:	84 27       	eor	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	27 c0       	rjmp	.+78     	; 0x12ee <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    12a0:	a5 e3       	ldi	r26, 0x35	; 53
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e5 e3       	ldi	r30, 0x35	; 53
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_enuTogPin+0xd0>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_enuTogPin+0xcc>
    12c2:	84 27       	eor	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	13 c0       	rjmp	.+38     	; 0x12ee <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    12c8:	a2 e3       	ldi	r26, 0x32	; 50
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e2 e3       	ldi	r30, 0x32	; 50
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_enuTogPin+0xf8>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_enuTogPin+0xf4>
    12ea:	84 27       	eor	r24, r20
    12ec:	8c 93       	st	X, r24
				break;
			}

		 Local_enuErrorstate = ES_OK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_enuTogPin+0x10a>
	  }else
	    {
	    	Local_enuErrorstate = ES_OUT_OF_RANGE;
    12f4:	83 e0       	ldi	r24, 0x03	; 3
    12f6:	89 83       	std	Y+1, r24	; 0x01
	     }
	return Local_enuErrorstate;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID, u8* Copy_Pu8Value )
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	27 97       	sbiw	r28, 0x07	; 7
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	8a 83       	std	Y+2, r24	; 0x02
    1320:	6b 83       	std	Y+3, r22	; 0x03
    1322:	5d 83       	std	Y+5, r21	; 0x05
    1324:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1326:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Pu8Value != NULL)
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	09 f4       	brne	.+2      	; 0x1332 <DIO_enuGetPinValue+0x28>
    1330:	7e c0       	rjmp	.+252    	; 0x142e <DIO_enuGetPinValue+0x124>
    {
	  if (Copy_u8PortID <= DIO_PORTD
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	08 f0       	brcs	.+2      	; 0x133a <DIO_enuGetPinValue+0x30>
    1338:	77 c0       	rjmp	.+238    	; 0x1428 <DIO_enuGetPinValue+0x11e>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	08 f0       	brcs	.+2      	; 0x1342 <DIO_enuGetPinValue+0x38>
    1340:	73 c0       	rjmp	.+230    	; 0x1428 <DIO_enuGetPinValue+0x11e>
		   &&Copy_u8PinID <=DIO_PIN7)
	  {
			switch(Copy_u8PortID)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3f 83       	std	Y+7, r19	; 0x07
    134a:	2e 83       	std	Y+6, r18	; 0x06
    134c:	4e 81       	ldd	r20, Y+6	; 0x06
    134e:	5f 81       	ldd	r21, Y+7	; 0x07
    1350:	41 30       	cpi	r20, 0x01	; 1
    1352:	51 05       	cpc	r21, r1
    1354:	59 f1       	breq	.+86     	; 0x13ac <DIO_enuGetPinValue+0xa2>
    1356:	8e 81       	ldd	r24, Y+6	; 0x06
    1358:	9f 81       	ldd	r25, Y+7	; 0x07
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	91 05       	cpc	r25, r1
    135e:	34 f4       	brge	.+12     	; 0x136c <DIO_enuGetPinValue+0x62>
    1360:	2e 81       	ldd	r18, Y+6	; 0x06
    1362:	3f 81       	ldd	r19, Y+7	; 0x07
    1364:	21 15       	cp	r18, r1
    1366:	31 05       	cpc	r19, r1
    1368:	69 f0       	breq	.+26     	; 0x1384 <DIO_enuGetPinValue+0x7a>
    136a:	5b c0       	rjmp	.+182    	; 0x1422 <DIO_enuGetPinValue+0x118>
    136c:	4e 81       	ldd	r20, Y+6	; 0x06
    136e:	5f 81       	ldd	r21, Y+7	; 0x07
    1370:	42 30       	cpi	r20, 0x02	; 2
    1372:	51 05       	cpc	r21, r1
    1374:	79 f1       	breq	.+94     	; 0x13d4 <DIO_enuGetPinValue+0xca>
    1376:	8e 81       	ldd	r24, Y+6	; 0x06
    1378:	9f 81       	ldd	r25, Y+7	; 0x07
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <DIO_enuGetPinValue+0x78>
    1380:	3d c0       	rjmp	.+122    	; 0x13fc <DIO_enuGetPinValue+0xf2>
    1382:	4f c0       	rjmp	.+158    	; 0x1422 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_Pu8Value =((PINA>>Copy_u8PinID)&DIO_MASK_BIT);
    1384:	e9 e3       	ldi	r30, 0x39	; 57
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_enuGetPinValue+0x92>
    1398:	55 95       	asr	r21
    139a:	47 95       	ror	r20
    139c:	8a 95       	dec	r24
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_enuGetPinValue+0x8e>
    13a0:	ca 01       	movw	r24, r20
    13a2:	81 70       	andi	r24, 0x01	; 1
    13a4:	ec 81       	ldd	r30, Y+4	; 0x04
    13a6:	fd 81       	ldd	r31, Y+5	; 0x05
    13a8:	80 83       	st	Z, r24
    13aa:	3b c0       	rjmp	.+118    	; 0x1422 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_Pu8Value =((PINB>>Copy_u8PinID)&DIO_MASK_BIT);
    13ac:	e6 e3       	ldi	r30, 0x36	; 54
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_enuGetPinValue+0xba>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_enuGetPinValue+0xb6>
    13c8:	ca 01       	movw	r24, r20
    13ca:	81 70       	andi	r24, 0x01	; 1
    13cc:	ec 81       	ldd	r30, Y+4	; 0x04
    13ce:	fd 81       	ldd	r31, Y+5	; 0x05
    13d0:	80 83       	st	Z, r24
    13d2:	27 c0       	rjmp	.+78     	; 0x1422 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_Pu8Value =((PINC>>Copy_u8PinID)&DIO_MASK_BIT);
    13d4:	e3 e3       	ldi	r30, 0x33	; 51
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_enuGetPinValue+0xe2>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_enuGetPinValue+0xde>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	ec 81       	ldd	r30, Y+4	; 0x04
    13f6:	fd 81       	ldd	r31, Y+5	; 0x05
    13f8:	80 83       	st	Z, r24
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_Pu8Value =((PIND>>Copy_u8PinID)&DIO_MASK_BIT);
    13fc:	e0 e3       	ldi	r30, 0x30	; 48
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a9 01       	movw	r20, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_enuGetPinValue+0x10a>
    1410:	55 95       	asr	r21
    1412:	47 95       	ror	r20
    1414:	8a 95       	dec	r24
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_enuGetPinValue+0x106>
    1418:	ca 01       	movw	r24, r20
    141a:	81 70       	andi	r24, 0x01	; 1
    141c:	ec 81       	ldd	r30, Y+4	; 0x04
    141e:	fd 81       	ldd	r31, Y+5	; 0x05
    1420:	80 83       	st	Z, r24
				break;
			}

		 Local_enuErrorstate = ES_OK;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <DIO_enuGetPinValue+0x128>
	  }else
	    {
	    	Local_enuErrorstate = ES_OUT_OF_RANGE;
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_enuGetPinValue+0x128>
	     }
    }else
    {
  	  Local_enuErrorstate = ES_NULL_POINTER;
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_enuErrorstate;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	27 96       	adiw	r28, 0x07	; 7
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	e9 97       	sbiw	r28, 0x39	; 57
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErorrState=ES_NOK;
    145a:	19 ae       	std	Y+57, r1	; 0x39

  	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
  	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
  	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	62 e0       	ldi	r22, 0x02	; 2
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>

 	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	67 e0       	ldi	r22, 0x07	; 7
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
 	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	66 e0       	ldi	r22, 0x06	; 6
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
 	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	65 e0       	ldi	r22, 0x05	; 5
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
 	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	64 e0       	ldi	r22, 0x04	; 4
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	ac e0       	ldi	r26, 0x0C	; 12
    14a8:	b2 e4       	ldi	r27, 0x42	; 66
    14aa:	8d ab       	std	Y+53, r24	; 0x35
    14ac:	9e ab       	std	Y+54, r25	; 0x36
    14ae:	af ab       	std	Y+55, r26	; 0x37
    14b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6d a9       	ldd	r22, Y+53	; 0x35
    14b4:	7e a9       	ldd	r23, Y+54	; 0x36
    14b6:	8f a9       	ldd	r24, Y+55	; 0x37
    14b8:	98 ad       	ldd	r25, Y+56	; 0x38
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a e7       	ldi	r20, 0x7A	; 122
    14c0:	53 e4       	ldi	r21, 0x43	; 67
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	89 ab       	std	Y+49, r24	; 0x31
    14cc:	9a ab       	std	Y+50, r25	; 0x32
    14ce:	ab ab       	std	Y+51, r26	; 0x33
    14d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14d2:	69 a9       	ldd	r22, Y+49	; 0x31
    14d4:	7a a9       	ldd	r23, Y+50	; 0x32
    14d6:	8b a9       	ldd	r24, Y+51	; 0x33
    14d8:	9c a9       	ldd	r25, Y+52	; 0x34
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_enuInit+0xae>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    14f4:	69 a9       	ldd	r22, Y+49	; 0x31
    14f6:	7a a9       	ldd	r23, Y+50	; 0x32
    14f8:	8b a9       	ldd	r24, Y+51	; 0x33
    14fa:	9c a9       	ldd	r25, Y+52	; 0x34
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6d a9       	ldd	r22, Y+53	; 0x35
    150e:	7e a9       	ldd	r23, Y+54	; 0x36
    1510:	8f a9       	ldd	r24, Y+55	; 0x37
    1512:	98 ad       	ldd	r25, Y+56	; 0x38
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	98 ab       	std	Y+48, r25	; 0x30
    1532:	8f a7       	std	Y+47, r24	; 0x2f
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_enuInit+0x10e>
    1536:	89 e1       	ldi	r24, 0x19	; 25
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9e a7       	std	Y+46, r25	; 0x2e
    153c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    153e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1540:	9e a5       	ldd	r25, Y+46	; 0x2e
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_enuInit+0xfc>
    1546:	9e a7       	std	Y+46, r25	; 0x2e
    1548:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8f a5       	ldd	r24, Y+47	; 0x2f
    154c:	98 a9       	ldd	r25, Y+48	; 0x30
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	98 ab       	std	Y+48, r25	; 0x30
    1552:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8f a5       	ldd	r24, Y+47	; 0x2f
    1556:	98 a9       	ldd	r25, Y+48	; 0x30
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_enuInit+0xf0>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	69 a9       	ldd	r22, Y+49	; 0x31
    1560:	7a a9       	ldd	r23, Y+50	; 0x32
    1562:	8b a9       	ldd	r24, Y+51	; 0x33
    1564:	9c a9       	ldd	r25, Y+52	; 0x34
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	98 ab       	std	Y+48, r25	; 0x30
    1570:	8f a7       	std	Y+47, r24	; 0x2f
    1572:	8f a5       	ldd	r24, Y+47	; 0x2f
    1574:	98 a9       	ldd	r25, Y+48	; 0x30
    1576:	9c a7       	std	Y+44, r25	; 0x2c
    1578:	8b a7       	std	Y+43, r24	; 0x2b
    157a:	8b a5       	ldd	r24, Y+43	; 0x2b
    157c:	9c a5       	ldd	r25, Y+44	; 0x2c
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_enuInit+0x138>
    1582:	9c a7       	std	Y+44, r25	; 0x2c
    1584:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	63 e0       	ldi	r22, 0x03	; 3
    158a:	41 e0       	ldi	r20, 0x01	; 1
    158c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>

	//Function set
	LCD_invidSendCommand(0x38);
    15ae:	88 e3       	ldi	r24, 0x38	; 56
    15b0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_invidSendCommand>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e8       	ldi	r26, 0x80	; 128
    15ba:	bf e3       	ldi	r27, 0x3F	; 63
    15bc:	8f a3       	std	Y+39, r24	; 0x27
    15be:	98 a7       	std	Y+40, r25	; 0x28
    15c0:	a9 a7       	std	Y+41, r26	; 0x29
    15c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	6f a1       	ldd	r22, Y+39	; 0x27
    15c6:	78 a5       	ldd	r23, Y+40	; 0x28
    15c8:	89 a5       	ldd	r24, Y+41	; 0x29
    15ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a e7       	ldi	r20, 0x7A	; 122
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8b a3       	std	Y+35, r24	; 0x23
    15de:	9c a3       	std	Y+36, r25	; 0x24
    15e0:	ad a3       	std	Y+37, r26	; 0x25
    15e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15e4:	6b a1       	ldd	r22, Y+35	; 0x23
    15e6:	7c a1       	ldd	r23, Y+36	; 0x24
    15e8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ea:	9e a1       	ldd	r25, Y+38	; 0x26
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <LCD_enuInit+0x1c0>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9a a3       	std	Y+34, r25	; 0x22
    1602:	89 a3       	std	Y+33, r24	; 0x21
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1606:	6b a1       	ldd	r22, Y+35	; 0x23
    1608:	7c a1       	ldd	r23, Y+36	; 0x24
    160a:	8d a1       	ldd	r24, Y+37	; 0x25
    160c:	9e a1       	ldd	r25, Y+38	; 0x26
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	6f a1       	ldd	r22, Y+39	; 0x27
    1620:	78 a5       	ldd	r23, Y+40	; 0x28
    1622:	89 a5       	ldd	r24, Y+41	; 0x29
    1624:	9a a5       	ldd	r25, Y+42	; 0x2a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9a a3       	std	Y+34, r25	; 0x22
    1644:	89 a3       	std	Y+33, r24	; 0x21
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <LCD_enuInit+0x220>
    1648:	89 e1       	ldi	r24, 0x19	; 25
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	98 a3       	std	Y+32, r25	; 0x20
    164e:	8f 8f       	std	Y+31, r24	; 0x1f
    1650:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1652:	98 a1       	ldd	r25, Y+32	; 0x20
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <LCD_enuInit+0x20e>
    1658:	98 a3       	std	Y+32, r25	; 0x20
    165a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	89 a1       	ldd	r24, Y+33	; 0x21
    165e:	9a a1       	ldd	r25, Y+34	; 0x22
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9a a3       	std	Y+34, r25	; 0x22
    1664:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	89 a1       	ldd	r24, Y+33	; 0x21
    1668:	9a a1       	ldd	r25, Y+34	; 0x22
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <LCD_enuInit+0x202>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6b a1       	ldd	r22, Y+35	; 0x23
    1672:	7c a1       	ldd	r23, Y+36	; 0x24
    1674:	8d a1       	ldd	r24, Y+37	; 0x25
    1676:	9e a1       	ldd	r25, Y+38	; 0x26
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9a a3       	std	Y+34, r25	; 0x22
    1682:	89 a3       	std	Y+33, r24	; 0x21
    1684:	89 a1       	ldd	r24, Y+33	; 0x21
    1686:	9a a1       	ldd	r25, Y+34	; 0x22
    1688:	9e 8f       	std	Y+30, r25	; 0x1e
    168a:	8d 8f       	std	Y+29, r24	; 0x1d
    168c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    168e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <LCD_enuInit+0x24a>
    1694:	9e 8f       	std	Y+30, r25	; 0x1e
    1696:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_invidSendCommand(0x28);
#else
#error "Your Selection To LCD Mode has a Wrong Value"
#endif
	_delay_ms(1);
	LCD_invidSendCommand(0x0f);
    1698:	8f e0       	ldi	r24, 0x0F	; 15
    169a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_invidSendCommand>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 e8       	ldi	r26, 0x80	; 128
    16a4:	bf e3       	ldi	r27, 0x3F	; 63
    16a6:	89 8f       	std	Y+25, r24	; 0x19
    16a8:	9a 8f       	std	Y+26, r25	; 0x1a
    16aa:	ab 8f       	std	Y+27, r26	; 0x1b
    16ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	69 8d       	ldd	r22, Y+25	; 0x19
    16b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a e7       	ldi	r20, 0x7A	; 122
    16bc:	53 e4       	ldi	r21, 0x43	; 67
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8d 8b       	std	Y+21, r24	; 0x15
    16c8:	9e 8b       	std	Y+22, r25	; 0x16
    16ca:	af 8b       	std	Y+23, r26	; 0x17
    16cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ce:	6d 89       	ldd	r22, Y+21	; 0x15
    16d0:	7e 89       	ldd	r23, Y+22	; 0x16
    16d2:	8f 89       	ldd	r24, Y+23	; 0x17
    16d4:	98 8d       	ldd	r25, Y+24	; 0x18
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <LCD_enuInit+0x2aa>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9c 8b       	std	Y+20, r25	; 0x14
    16ec:	8b 8b       	std	Y+19, r24	; 0x13
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    16f0:	6d 89       	ldd	r22, Y+21	; 0x15
    16f2:	7e 89       	ldd	r23, Y+22	; 0x16
    16f4:	8f 89       	ldd	r24, Y+23	; 0x17
    16f6:	98 8d       	ldd	r25, Y+24	; 0x18
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	69 8d       	ldd	r22, Y+25	; 0x19
    170a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9c 8b       	std	Y+20, r25	; 0x14
    172e:	8b 8b       	std	Y+19, r24	; 0x13
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <LCD_enuInit+0x30a>
    1732:	89 e1       	ldi	r24, 0x19	; 25
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9a 8b       	std	Y+18, r25	; 0x12
    1738:	89 8b       	std	Y+17, r24	; 0x11
    173a:	89 89       	ldd	r24, Y+17	; 0x11
    173c:	9a 89       	ldd	r25, Y+18	; 0x12
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_enuInit+0x2f8>
    1742:	9a 8b       	std	Y+18, r25	; 0x12
    1744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <LCD_enuInit+0x2ec>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6d 89       	ldd	r22, Y+21	; 0x15
    175c:	7e 89       	ldd	r23, Y+22	; 0x16
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9c 8b       	std	Y+20, r25	; 0x14
    176c:	8b 8b       	std	Y+19, r24	; 0x13
    176e:	8b 89       	ldd	r24, Y+19	; 0x13
    1770:	9c 89       	ldd	r25, Y+20	; 0x14
    1772:	98 8b       	std	Y+16, r25	; 0x10
    1774:	8f 87       	std	Y+15, r24	; 0x0f
    1776:	8f 85       	ldd	r24, Y+15	; 0x0f
    1778:	98 89       	ldd	r25, Y+16	; 0x10
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_enuInit+0x334>
    177e:	98 8b       	std	Y+16, r25	; 0x10
    1780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommand(0x01);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_invidSendCommand>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e4       	ldi	r27, 0x40	; 64
    1790:	8b 87       	std	Y+11, r24	; 0x0b
    1792:	9c 87       	std	Y+12, r25	; 0x0c
    1794:	ad 87       	std	Y+13, r26	; 0x0d
    1796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a e7       	ldi	r20, 0x7A	; 122
    17a6:	53 e4       	ldi	r21, 0x43	; 67
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8f 83       	std	Y+7, r24	; 0x07
    17b2:	98 87       	std	Y+8, r25	; 0x08
    17b4:	a9 87       	std	Y+9, r26	; 0x09
    17b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <LCD_enuInit+0x394>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	0f c0       	rjmp	.+30     	; 0x183a <LCD_enuInit+0x3f4>
    181c:	89 e1       	ldi	r24, 0x19	; 25
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_enuInit+0x3e2>
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <LCD_enuInit+0x3d6>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_enuInit+0x41e>
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommand(0x06);
    186c:	86 e0       	ldi	r24, 0x06	; 6
    186e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_invidSendCommand>

	return Local_enuErorrState;
    1872:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1874:	e9 96       	adiw	r28, 0x39	; 57
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8char)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <LCD_enuDisplayChar+0x6>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErorrState=ES_NOK;
    1892:	19 82       	std	Y+1, r1	; 0x01

		//set RS as data
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8char);
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	0e 94 6d 0c 	call	0x18da	; 0x18da <LCD_vidLatch>

	return Local_enuErorrState;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8command)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <LCD_enuSendCommand+0x6>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	8a 83       	std	Y+2, r24	; 0x02
		ES_t Local_enuErorrState=ES_NOK;
    18bc:	19 82       	std	Y+1, r1	; 0x01

		//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8command);
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	0e 94 6d 0c 	call	0x18da	; 0x18da <LCD_vidLatch>

	return Local_enuErorrState;
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <LCD_vidLatch>:

static void LCD_vidLatch(u8 Copy_u8Data)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	2f 97       	sbiw	r28, 0x0f	; 15
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	8f 87       	std	Y+15, r24	; 0x0f
		//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
		 //set enable is low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

		//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&1));
    1904:	8f 85       	ldd	r24, Y+15	; 0x0f
    1906:	98 2f       	mov	r25, r24
    1908:	99 1f       	adc	r25, r25
    190a:	99 27       	eor	r25, r25
    190c:	99 1f       	adc	r25, r25
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	67 e0       	ldi	r22, 0x07	; 7
    1912:	49 2f       	mov	r20, r25
    1914:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&1));
    1918:	8f 85       	ldd	r24, Y+15	; 0x0f
    191a:	82 95       	swap	r24
    191c:	86 95       	lsr	r24
    191e:	86 95       	lsr	r24
    1920:	83 70       	andi	r24, 0x03	; 3
    1922:	98 2f       	mov	r25, r24
    1924:	91 70       	andi	r25, 0x01	; 1
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	66 e0       	ldi	r22, 0x06	; 6
    192a:	49 2f       	mov	r20, r25
    192c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&1));
    1930:	8f 85       	ldd	r24, Y+15	; 0x0f
    1932:	82 95       	swap	r24
    1934:	86 95       	lsr	r24
    1936:	87 70       	andi	r24, 0x07	; 7
    1938:	98 2f       	mov	r25, r24
    193a:	91 70       	andi	r25, 0x01	; 1
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	65 e0       	ldi	r22, 0x05	; 5
    1940:	49 2f       	mov	r20, r25
    1942:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&1));
    1946:	8f 85       	ldd	r24, Y+15	; 0x0f
    1948:	82 95       	swap	r24
    194a:	8f 70       	andi	r24, 0x0F	; 15
    194c:	98 2f       	mov	r25, r24
    194e:	91 70       	andi	r25, 0x01	; 1
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	49 2f       	mov	r20, r25
    1956:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&1));
    195a:	8f 85       	ldd	r24, Y+15	; 0x0f
    195c:	86 95       	lsr	r24
    195e:	86 95       	lsr	r24
    1960:	86 95       	lsr	r24
    1962:	98 2f       	mov	r25, r24
    1964:	91 70       	andi	r25, 0x01	; 1
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	63 e0       	ldi	r22, 0x03	; 3
    196a:	49 2f       	mov	r20, r25
    196c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&1));
    1970:	8f 85       	ldd	r24, Y+15	; 0x0f
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	98 2f       	mov	r25, r24
    1978:	91 70       	andi	r25, 0x01	; 1
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	49 2f       	mov	r20, r25
    1980:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&1));
    1984:	8f 85       	ldd	r24, Y+15	; 0x0f
    1986:	86 95       	lsr	r24
    1988:	98 2f       	mov	r25, r24
    198a:	91 70       	andi	r25, 0x01	; 1
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	49 2f       	mov	r20, r25
    1992:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&1));
    1996:	8f 85       	ldd	r24, Y+15	; 0x0f
    1998:	98 2f       	mov	r25, r24
    199a:	91 70       	andi	r25, 0x01	; 1
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	49 2f       	mov	r20, r25
    19a2:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
#else
#error "Your Selection To LCD Mode has a Wrong Value"
#endif

	 //Enable Latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e2       	ldi	r26, 0x20	; 32
    19b6:	b1 e4       	ldi	r27, 0x41	; 65
    19b8:	8b 87       	std	Y+11, r24	; 0x0b
    19ba:	9c 87       	std	Y+12, r25	; 0x0c
    19bc:	ad 87       	std	Y+13, r26	; 0x0d
    19be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	53 e4       	ldi	r21, 0x43	; 67
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8f 83       	std	Y+7, r24	; 0x07
    19da:	98 87       	std	Y+8, r25	; 0x08
    19dc:	a9 87       	std	Y+9, r26	; 0x09
    19de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_vidLatch+0x128>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_vidLatch+0x188>
    1a44:	89 e1       	ldi	r24, 0x19	; 25
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 83       	std	Y+4, r25	; 0x04
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_vidLatch+0x176>
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_vidLatch+0x16a>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_vidLatch+0x1b2>
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	}
    1a9e:	2f 96       	adiw	r28, 0x0f	; 15
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8command)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	2f 97       	sbiw	r28, 0x0f	; 15
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	8f 87       	std	Y+15, r24	; 0x0f
		//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
		//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
		 //set enable is low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

		//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8command>>7)&1));
    1ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	99 27       	eor	r25, r25
    1aec:	99 1f       	adc	r25, r25
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	67 e0       	ldi	r22, 0x07	; 7
    1af2:	49 2f       	mov	r20, r25
    1af4:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8command>>6)&1));
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	82 95       	swap	r24
    1afc:	86 95       	lsr	r24
    1afe:	86 95       	lsr	r24
    1b00:	83 70       	andi	r24, 0x03	; 3
    1b02:	98 2f       	mov	r25, r24
    1b04:	91 70       	andi	r25, 0x01	; 1
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	66 e0       	ldi	r22, 0x06	; 6
    1b0a:	49 2f       	mov	r20, r25
    1b0c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8command>>5)&1));
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	82 95       	swap	r24
    1b14:	86 95       	lsr	r24
    1b16:	87 70       	andi	r24, 0x07	; 7
    1b18:	98 2f       	mov	r25, r24
    1b1a:	91 70       	andi	r25, 0x01	; 1
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	65 e0       	ldi	r22, 0x05	; 5
    1b20:	49 2f       	mov	r20, r25
    1b22:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8command>>4)&1));
    1b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b28:	82 95       	swap	r24
    1b2a:	8f 70       	andi	r24, 0x0F	; 15
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	91 70       	andi	r25, 0x01	; 1
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	64 e0       	ldi	r22, 0x04	; 4
    1b34:	49 2f       	mov	r20, r25
    1b36:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8command>>3)&1));
    1b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3c:	86 95       	lsr	r24
    1b3e:	86 95       	lsr	r24
    1b40:	86 95       	lsr	r24
    1b42:	98 2f       	mov	r25, r24
    1b44:	91 70       	andi	r25, 0x01	; 1
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	63 e0       	ldi	r22, 0x03	; 3
    1b4a:	49 2f       	mov	r20, r25
    1b4c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8command>>2)&1));
    1b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b52:	86 95       	lsr	r24
    1b54:	86 95       	lsr	r24
    1b56:	98 2f       	mov	r25, r24
    1b58:	91 70       	andi	r25, 0x01	; 1
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	62 e0       	ldi	r22, 0x02	; 2
    1b5e:	49 2f       	mov	r20, r25
    1b60:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8command>>1)&1));
    1b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b66:	86 95       	lsr	r24
    1b68:	98 2f       	mov	r25, r24
    1b6a:	91 70       	andi	r25, 0x01	; 1
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	49 2f       	mov	r20, r25
    1b72:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8command>>0)&1));
    1b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b78:	98 2f       	mov	r25, r24
    1b7a:	91 70       	andi	r25, 0x01	; 1
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	49 2f       	mov	r20, r25
    1b82:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

	 //Enable Latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	62 e0       	ldi	r22, 0x02	; 2
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e2       	ldi	r26, 0x20	; 32
    1b96:	b1 e4       	ldi	r27, 0x41	; 65
    1b98:	8b 87       	std	Y+11, r24	; 0x0b
    1b9a:	9c 87       	std	Y+12, r25	; 0x0c
    1b9c:	ad 87       	std	Y+13, r26	; 0x0d
    1b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8f 83       	std	Y+7, r24	; 0x07
    1bba:	98 87       	std	Y+8, r25	; 0x08
    1bbc:	a9 87       	std	Y+9, r26	; 0x09
    1bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_invidSendCommand+0x192>
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_invidSendCommand+0x180>
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_invidSendCommand+0x174>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_invidSendCommand+0x1bc>
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	62 e0       	ldi	r22, 0x02	; 2
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
}
    1c7e:	2f 96       	adiw	r28, 0x0f	; 15
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <LCD_u8Clear>:

void LCD_u8Clear(void)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	LCD_enuSendCommand(0x01);
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuSendCommand>
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <KEYPAD_enuInit>:

#include "Keypad_config.h"
#include "Keypad_priv.h"

ES_t KEYPAD_enuInit(void)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState =ES_NOK;
    1cae:	19 82       	std	Y+1, r1	; 0x01

  	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8OUTPUT);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1cba:	89 83       	std	Y+1, r24	; 0x01
  	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8OUTPUT);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1cc6:	89 83       	std	Y+1, r24	; 0x01
  	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8OUTPUT);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	62 e0       	ldi	r22, 0x02	; 2
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1cd2:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8OUTPUT);
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	63 e0       	ldi	r22, 0x03	; 3
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1cde:	89 83       	std	Y+1, r24	; 0x01

 	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8INPUT);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	64 e0       	ldi	r22, 0x04	; 4
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1cea:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8INPUT);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	65 e0       	ldi	r22, 0x05	; 5
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1cf6:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8INPUT);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1d02:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8INPUT);
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	67 e0       	ldi	r22, 0x07	; 7
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <DIO_enuSetPinDirection>
    1d0e:	89 83       	std	Y+1, r24	; 0x01

  	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8HIGH);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d1a:	89 83       	std	Y+1, r24	; 0x01
  	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8HIGH);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d26:	89 83       	std	Y+1, r24	; 0x01
  	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8HIGH);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	62 e0       	ldi	r22, 0x02	; 2
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d32:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8HIGH);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	63 e0       	ldi	r22, 0x03	; 3
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d3e:	89 83       	std	Y+1, r24	; 0x01

 	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_ROW0_PIN,DIO_u8PULL_UP);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	64 e0       	ldi	r22, 0x04	; 4
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d4a:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_ROW1_PIN,DIO_u8PULL_UP);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	65 e0       	ldi	r22, 0x05	; 5
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d56:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_ROW2_PIN,DIO_u8PULL_UP);
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	66 e0       	ldi	r22, 0x06	; 6
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d62:	89 83       	std	Y+1, r24	; 0x01
 	Local_ErrorState= DIO_enuSetPinValue(KPD_PORT,KPD_ROW3_PIN,DIO_u8PULL_UP);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	67 e0       	ldi	r22, 0x07	; 7
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
    1d6e:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorState;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <KEYPAD_u8GetPressedKey>:

u8 KEYPAD_u8GetPressedKey(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <KEYPAD_u8GetPressedKey+0x6>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <KEYPAD_u8GetPressedKey+0x8>
    1d82:	0f 92       	push	r0
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
	        u8 Local_u8PressedKey ,Local_u8ColumnIndex ,Local_u8RowIndex ,Local_u8PinState;

        	Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
            static u8 Local_u8ArrKPD[ROW_NUM][COLUMN_NUM]=KPD_ARY_VAL;

        	static u8 Local_u8ArrColumn[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
            static u8 Local_u8ArrRow[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

            for(Local_u8ColumnIndex=0 ;Local_u8ColumnIndex <COLUMN_NUM ;Local_u8ColumnIndex++)
    1d8c:	1a 82       	std	Y+2, r1	; 0x02
    1d8e:	5e c0       	rjmp	.+188    	; 0x1e4c <KEYPAD_u8GetPressedKey+0xd2>
	          {
            	//Activate column
            	DIO_enuSetPinValue(KPD_PORT,Local_u8ArrColumn[Local_u8ColumnIndex],DIO_u8LOW);
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	fc 01       	movw	r30, r24
    1d98:	e4 59       	subi	r30, 0x94	; 148
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	90 81       	ld	r25, Z
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	69 2f       	mov	r22, r25
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>

            	for(Local_u8RowIndex=0;Local_u8RowIndex <ROW_NUM ;Local_u8RowIndex++)
    1da8:	19 82       	std	Y+1, r1	; 0x01
    1daa:	3d c0       	rjmp	.+122    	; 0x1e26 <KEYPAD_u8GetPressedKey+0xac>
        		{
                   //Read the current row
        			 DIO_enuGetPinValue(KPD_PORT,Local_u8ArrRow[Local_u8RowIndex],&Local_u8PinState);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	fc 01       	movw	r30, r24
    1db4:	e8 59       	subi	r30, 0x98	; 152
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	90 81       	ld	r25, Z
    1dba:	9e 01       	movw	r18, r28
    1dbc:	2c 5f       	subi	r18, 0xFC	; 252
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	69 2f       	mov	r22, r25
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_enuGetPinValue>
        	      // check if key is press
        	    if(DIO_u8LOW == Local_u8PinState)
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	88 23       	and	r24, r24
    1dce:	41 f5       	brne	.+80     	; 0x1e20 <KEYPAD_u8GetPressedKey+0xa6>
        	      {
       			 Local_u8PressedKey=Local_u8ArrKPD[Local_u8RowIndex][Local_u8ColumnIndex];
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	ca 01       	movw	r24, r20
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	fc 01       	movw	r30, r24
    1dec:	e0 59       	subi	r30, 0x90	; 144
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <KEYPAD_u8GetPressedKey+0x9a>
       		      // polling (busy waiting) until the key is released
       			 while(DIO_u8LOW == Local_u8PinState)
       		   {
       				 DIO_enuGetPinValue(KPD_PORT,Local_u8ArrRow[Local_u8RowIndex],&Local_u8PinState);
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e8 59       	subi	r30, 0x98	; 152
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	90 81       	ld	r25, Z
    1e04:	9e 01       	movw	r18, r28
    1e06:	2c 5f       	subi	r18, 0xFC	; 252
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	69 2f       	mov	r22, r25
    1e0e:	a9 01       	movw	r20, r18
    1e10:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_enuGetPinValue>
        	      // check if key is press
        	    if(DIO_u8LOW == Local_u8PinState)
        	      {
       			 Local_u8PressedKey=Local_u8ArrKPD[Local_u8RowIndex][Local_u8ColumnIndex];
       		      // polling (busy waiting) until the key is released
       			 while(DIO_u8LOW == Local_u8PinState)
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	88 23       	and	r24, r24
    1e18:	71 f3       	breq	.-36     	; 0x1df6 <KEYPAD_u8GetPressedKey+0x7c>
       		   {
       				 DIO_enuGetPinValue(KPD_PORT,Local_u8ArrRow[Local_u8RowIndex],&Local_u8PinState);
       		   }
       			 return Local_u8PressedKey;
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	1c c0       	rjmp	.+56     	; 0x1e58 <KEYPAD_u8GetPressedKey+0xde>
            for(Local_u8ColumnIndex=0 ;Local_u8ColumnIndex <COLUMN_NUM ;Local_u8ColumnIndex++)
	          {
            	//Activate column
            	DIO_enuSetPinValue(KPD_PORT,Local_u8ArrColumn[Local_u8ColumnIndex],DIO_u8LOW);

            	for(Local_u8RowIndex=0;Local_u8RowIndex <ROW_NUM ;Local_u8RowIndex++)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	84 30       	cpi	r24, 0x04	; 4
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <KEYPAD_u8GetPressedKey+0xb4>
    1e2c:	bf cf       	rjmp	.-130    	; 0x1dac <KEYPAD_u8GetPressedKey+0x32>
       			 return Local_u8PressedKey;
        	      }
        		}

        		 // Deactivate current column
        		 DIO_enuSetPinValue(KPD_PORT,Local_u8ArrColumn[Local_u8ColumnIndex],DIO_u8HIGH);
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	fc 01       	movw	r30, r24
    1e36:	e4 59       	subi	r30, 0x94	; 148
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	90 81       	ld	r25, Z
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	69 2f       	mov	r22, r25
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_enuSetPinValue>
            static u8 Local_u8ArrKPD[ROW_NUM][COLUMN_NUM]=KPD_ARY_VAL;

        	static u8 Local_u8ArrColumn[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
            static u8 Local_u8ArrRow[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

            for(Local_u8ColumnIndex=0 ;Local_u8ColumnIndex <COLUMN_NUM ;Local_u8ColumnIndex++)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	84 30       	cpi	r24, 0x04	; 4
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <KEYPAD_u8GetPressedKey+0xda>
    1e52:	9e cf       	rjmp	.-196    	; 0x1d90 <KEYPAD_u8GetPressedKey+0x16>
        		}

        		 // Deactivate current column
        		 DIO_enuSetPinValue(KPD_PORT,Local_u8ArrColumn[Local_u8ColumnIndex],DIO_u8HIGH);
	          }
            return Local_u8PressedKey;
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
	}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <APP_enuInit>:

#include "APP_priv.h"


ES_t APP_enuInit(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
	ES_t Loca_ErrorState =ES_NOK;
    1e74:	19 82       	std	Y+1, r1	; 0x01

	Loca_ErrorState= DIO_enuInit();
    1e76:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	Loca_ErrorState= LCD_enuInit();
    1e7c:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_enuInit>
    1e80:	89 83       	std	Y+1, r24	; 0x01
	Loca_ErrorState= KEYPAD_enuInit();
    1e82:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <KEYPAD_enuInit>
    1e86:	89 83       	std	Y+1, r24	; 0x01

	return Loca_ErrorState;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8a:	0f 90       	pop	r0
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <APP_inenuConvertCharToNumber>:

ES_t APP_inenuConvertCharToNumber(u8* Copy_u8Char)
 {
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <APP_inenuConvertCharToNumber+0x6>
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <APP_inenuConvertCharToNumber+0x8>
    1e9a:	0f 92       	push	r0
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	9b 83       	std	Y+3, r25	; 0x03
    1ea2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState =ES_NOK;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Char !=NULL)
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <APP_inenuConvertCharToNumber+0x1e>
    1eae:	86 c0       	rjmp	.+268    	; 0x1fbc <APP_inenuConvertCharToNumber+0x12a>
	{
		switch(*Copy_u8Char)
    1eb0:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb2:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb4:	80 81       	ld	r24, Z
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	3d 83       	std	Y+5, r19	; 0x05
    1ebc:	2c 83       	std	Y+4, r18	; 0x04
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec2:	84 33       	cpi	r24, 0x34	; 52
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <APP_inenuConvertCharToNumber+0x38>
    1ec8:	54 c0       	rjmp	.+168    	; 0x1f72 <APP_inenuConvertCharToNumber+0xe0>
    1eca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ece:	25 33       	cpi	r18, 0x35	; 53
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	e4 f4       	brge	.+56     	; 0x1f0c <APP_inenuConvertCharToNumber+0x7a>
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	81 33       	cpi	r24, 0x31	; 49
    1eda:	91 05       	cpc	r25, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <APP_inenuConvertCharToNumber+0x4e>
    1ede:	3a c0       	rjmp	.+116    	; 0x1f54 <APP_inenuConvertCharToNumber+0xc2>
    1ee0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee4:	22 33       	cpi	r18, 0x32	; 50
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	34 f4       	brge	.+12     	; 0x1ef6 <APP_inenuConvertCharToNumber+0x64>
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	80 33       	cpi	r24, 0x30	; 48
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	61 f1       	breq	.+88     	; 0x1f4c <APP_inenuConvertCharToNumber+0xba>
    1ef4:	5c c0       	rjmp	.+184    	; 0x1fae <APP_inenuConvertCharToNumber+0x11c>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	22 33       	cpi	r18, 0x32	; 50
    1efc:	31 05       	cpc	r19, r1
    1efe:	79 f1       	breq	.+94     	; 0x1f5e <APP_inenuConvertCharToNumber+0xcc>
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	83 33       	cpi	r24, 0x33	; 51
    1f06:	91 05       	cpc	r25, r1
    1f08:	79 f1       	breq	.+94     	; 0x1f68 <APP_inenuConvertCharToNumber+0xd6>
    1f0a:	51 c0       	rjmp	.+162    	; 0x1fae <APP_inenuConvertCharToNumber+0x11c>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	27 33       	cpi	r18, 0x37	; 55
    1f12:	31 05       	cpc	r19, r1
    1f14:	e9 f1       	breq	.+122    	; 0x1f90 <APP_inenuConvertCharToNumber+0xfe>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	88 33       	cpi	r24, 0x38	; 56
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	5c f4       	brge	.+22     	; 0x1f36 <APP_inenuConvertCharToNumber+0xa4>
    1f20:	2c 81       	ldd	r18, Y+4	; 0x04
    1f22:	3d 81       	ldd	r19, Y+5	; 0x05
    1f24:	25 33       	cpi	r18, 0x35	; 53
    1f26:	31 05       	cpc	r19, r1
    1f28:	49 f1       	breq	.+82     	; 0x1f7c <APP_inenuConvertCharToNumber+0xea>
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	86 33       	cpi	r24, 0x36	; 54
    1f30:	91 05       	cpc	r25, r1
    1f32:	49 f1       	breq	.+82     	; 0x1f86 <APP_inenuConvertCharToNumber+0xf4>
    1f34:	3c c0       	rjmp	.+120    	; 0x1fae <APP_inenuConvertCharToNumber+0x11c>
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	28 33       	cpi	r18, 0x38	; 56
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	69 f1       	breq	.+90     	; 0x1f9a <APP_inenuConvertCharToNumber+0x108>
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	89 33       	cpi	r24, 0x39	; 57
    1f46:	91 05       	cpc	r25, r1
    1f48:	69 f1       	breq	.+90     	; 0x1fa4 <APP_inenuConvertCharToNumber+0x112>
    1f4a:	31 c0       	rjmp	.+98     	; 0x1fae <APP_inenuConvertCharToNumber+0x11c>
		{
		case '0':
			*Copy_u8Char =0;
    1f4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f50:	10 82       	st	Z, r1
    1f52:	36 c0       	rjmp	.+108    	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '1':
			*Copy_u8Char =1;
    1f54:	ea 81       	ldd	r30, Y+2	; 0x02
    1f56:	fb 81       	ldd	r31, Y+3	; 0x03
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	80 83       	st	Z, r24
    1f5c:	31 c0       	rjmp	.+98     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '2':
			*Copy_u8Char =2;
    1f5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f60:	fb 81       	ldd	r31, Y+3	; 0x03
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	80 83       	st	Z, r24
    1f66:	2c c0       	rjmp	.+88     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '3':
			*Copy_u8Char =3;
    1f68:	ea 81       	ldd	r30, Y+2	; 0x02
    1f6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	80 83       	st	Z, r24
    1f70:	27 c0       	rjmp	.+78     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '4':
			*Copy_u8Char =4;
    1f72:	ea 81       	ldd	r30, Y+2	; 0x02
    1f74:	fb 81       	ldd	r31, Y+3	; 0x03
    1f76:	84 e0       	ldi	r24, 0x04	; 4
    1f78:	80 83       	st	Z, r24
    1f7a:	22 c0       	rjmp	.+68     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '5':
			*Copy_u8Char =5;
    1f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f80:	85 e0       	ldi	r24, 0x05	; 5
    1f82:	80 83       	st	Z, r24
    1f84:	1d c0       	rjmp	.+58     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '6':
			*Copy_u8Char =6;
    1f86:	ea 81       	ldd	r30, Y+2	; 0x02
    1f88:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8a:	86 e0       	ldi	r24, 0x06	; 6
    1f8c:	80 83       	st	Z, r24
    1f8e:	18 c0       	rjmp	.+48     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '7':
			*Copy_u8Char =7;
    1f90:	ea 81       	ldd	r30, Y+2	; 0x02
    1f92:	fb 81       	ldd	r31, Y+3	; 0x03
    1f94:	87 e0       	ldi	r24, 0x07	; 7
    1f96:	80 83       	st	Z, r24
    1f98:	13 c0       	rjmp	.+38     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '8':
			*Copy_u8Char =8;
    1f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f9e:	88 e0       	ldi	r24, 0x08	; 8
    1fa0:	80 83       	st	Z, r24
    1fa2:	0e c0       	rjmp	.+28     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		case '9':
			*Copy_u8Char =9;
    1fa4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fa6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fa8:	89 e0       	ldi	r24, 0x09	; 9
    1faa:	80 83       	st	Z, r24
    1fac:	09 c0       	rjmp	.+18     	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		default:
			LCD_u8Clear();
    1fae:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_u8Clear>
			*Copy_u8Char ='e';
    1fb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb6:	85 e6       	ldi	r24, 0x65	; 101
    1fb8:	80 83       	st	Z, r24
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <APP_inenuConvertCharToNumber+0x12e>
			break;
		}
	}
	else
	{
		Local_ErrorState =ES_NULL_POINTER;
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	}

  return Local_ErrorState;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <APP_enuStartApp>:

ES_t APP_enuStartApp(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <APP_enuStartApp+0x6>
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	ES_t Loca_ErrorState =ES_NOK;
    1fde:	19 82       	std	Y+1, r1	; 0x01

	  do{

		  Number_1=KEYPAD_u8GetPressedKey();
    1fe0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <KEYPAD_u8GetPressedKey>
    1fe4:	80 93 8e 00 	sts	0x008E, r24

		  if(Number_1 != KPD_NO_PRESSED_KEY)
    1fe8:	80 91 8e 00 	lds	r24, 0x008E
    1fec:	8f 3f       	cpi	r24, 0xFF	; 255
    1fee:	11 f0       	breq	.+4      	; 0x1ff4 <APP_enuStartApp+0x22>
		  {
			  LCD_u8Clear();
    1ff0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_u8Clear>
		  }
	  }while(Number_1 == KPD_NO_PRESSED_KEY );
    1ff4:	80 91 8e 00 	lds	r24, 0x008E
    1ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffa:	91 f3       	breq	.-28     	; 0x1fe0 <APP_enuStartApp+0xe>

	Loca_ErrorState= LCD_enuDisplayChar(Number_1);
    1ffc:	80 91 8e 00 	lds	r24, 0x008E
    2000:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    2004:	89 83       	std	Y+1, r24	; 0x01
	Loca_ErrorState|=APP_inenuConvertCharToNumber(&Number_1);
    2006:	8e e8       	ldi	r24, 0x8E	; 142
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <APP_inenuConvertCharToNumber>
    200e:	98 2f       	mov	r25, r24
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	89 2b       	or	r24, r25
    2014:	89 83       	std	Y+1, r24	; 0x01


   do{
		 Operation=KEYPAD_u8GetPressedKey();
    2016:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <KEYPAD_u8GetPressedKey>
    201a:	80 93 8f 00 	sts	0x008F, r24
	    }while(Operation == KPD_NO_PRESSED_KEY);
    201e:	80 91 8f 00 	lds	r24, 0x008F
    2022:	8f 3f       	cpi	r24, 0xFF	; 255
    2024:	c1 f3       	breq	.-16     	; 0x2016 <APP_enuStartApp+0x44>

	    LCD_enuDisplayChar(Operation);
    2026:	80 91 8f 00 	lds	r24, 0x008F
    202a:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>


	  do{
		  Number_2=KEYPAD_u8GetPressedKey();
    202e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <KEYPAD_u8GetPressedKey>
    2032:	80 93 8b 00 	sts	0x008B, r24
	  }while(Number_2 == KPD_NO_PRESSED_KEY);
    2036:	80 91 8b 00 	lds	r24, 0x008B
    203a:	8f 3f       	cpi	r24, 0xFF	; 255
    203c:	c1 f3       	breq	.-16     	; 0x202e <APP_enuStartApp+0x5c>

	  Loca_ErrorState|=LCD_enuDisplayChar(Number_2);
    203e:	80 91 8b 00 	lds	r24, 0x008B
    2042:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    2046:	98 2f       	mov	r25, r24
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	89 2b       	or	r24, r25
    204c:	89 83       	std	Y+1, r24	; 0x01
	  Loca_ErrorState|= APP_inenuConvertCharToNumber(&Number_2);
    204e:	8b e8       	ldi	r24, 0x8B	; 139
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <APP_inenuConvertCharToNumber>
    2056:	98 2f       	mov	r25, r24
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	89 2b       	or	r24, r25
    205c:	89 83       	std	Y+1, r24	; 0x01

	     if((Operation != '+' &&Operation != '-'&&Operation != '*'&&Operation != '/' &&Operation != '%' )
    205e:	80 91 8f 00 	lds	r24, 0x008F
    2062:	8b 32       	cpi	r24, 0x2B	; 43
    2064:	81 f0       	breq	.+32     	; 0x2086 <APP_enuStartApp+0xb4>
    2066:	80 91 8f 00 	lds	r24, 0x008F
    206a:	8d 32       	cpi	r24, 0x2D	; 45
    206c:	61 f0       	breq	.+24     	; 0x2086 <APP_enuStartApp+0xb4>
    206e:	80 91 8f 00 	lds	r24, 0x008F
    2072:	8a 32       	cpi	r24, 0x2A	; 42
    2074:	41 f0       	breq	.+16     	; 0x2086 <APP_enuStartApp+0xb4>
    2076:	80 91 8f 00 	lds	r24, 0x008F
    207a:	8f 32       	cpi	r24, 0x2F	; 47
    207c:	21 f0       	breq	.+8      	; 0x2086 <APP_enuStartApp+0xb4>
    207e:	80 91 8f 00 	lds	r24, 0x008F
    2082:	85 32       	cpi	r24, 0x25	; 37
    2084:	41 f4       	brne	.+16     	; 0x2096 <APP_enuStartApp+0xc4>
    2086:	80 91 8e 00 	lds	r24, 0x008E
    208a:	85 36       	cpi	r24, 0x65	; 101
    208c:	21 f0       	breq	.+8      	; 0x2096 <APP_enuStartApp+0xc4>
    208e:	80 91 8b 00 	lds	r24, 0x008B
    2092:	85 36       	cpi	r24, 0x65	; 101
    2094:	19 f4       	brne	.+6      	; 0x209c <APP_enuStartApp+0xca>
	    		 ||(Number_1 =='e'||Number_2 == 'e'))
	      {
	     	  Operation ='e';
    2096:	85 e6       	ldi	r24, 0x65	; 101
    2098:	80 93 8f 00 	sts	0x008F, r24
	      }

	       Loca_ErrorState|=LCD_enuDisplayChar('=');
    209c:	8d e3       	ldi	r24, 0x3D	; 61
    209e:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    20a2:	98 2f       	mov	r25, r24
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	89 2b       	or	r24, r25
    20a8:	89 83       	std	Y+1, r24	; 0x01

	 if(Operation !='e')
    20aa:	80 91 8f 00 	lds	r24, 0x008F
    20ae:	85 36       	cpi	r24, 0x65	; 101
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <APP_enuStartApp+0xe2>
    20b2:	b1 c0       	rjmp	.+354    	; 0x2216 <APP_enuStartApp+0x244>
	 {
	   switch(Operation)
    20b4:	80 91 8f 00 	lds	r24, 0x008F
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	3b 83       	std	Y+3, r19	; 0x03
    20be:	2a 83       	std	Y+2, r18	; 0x02
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	8b 32       	cpi	r24, 0x2B	; 43
    20c6:	91 05       	cpc	r25, r1
    20c8:	d9 f1       	breq	.+118    	; 0x2140 <APP_enuStartApp+0x16e>
    20ca:	2a 81       	ldd	r18, Y+2	; 0x02
    20cc:	3b 81       	ldd	r19, Y+3	; 0x03
    20ce:	2c 32       	cpi	r18, 0x2C	; 44
    20d0:	31 05       	cpc	r19, r1
    20d2:	64 f4       	brge	.+24     	; 0x20ec <APP_enuStartApp+0x11a>
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	85 32       	cpi	r24, 0x25	; 37
    20da:	91 05       	cpc	r25, r1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <APP_enuStartApp+0x10e>
    20de:	4c c0       	rjmp	.+152    	; 0x2178 <APP_enuStartApp+0x1a6>
    20e0:	2a 81       	ldd	r18, Y+2	; 0x02
    20e2:	3b 81       	ldd	r19, Y+3	; 0x03
    20e4:	2a 32       	cpi	r18, 0x2A	; 42
    20e6:	31 05       	cpc	r19, r1
    20e8:	99 f1       	breq	.+102    	; 0x2150 <APP_enuStartApp+0x17e>
    20ea:	50 c0       	rjmp	.+160    	; 0x218c <APP_enuStartApp+0x1ba>
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	8d 32       	cpi	r24, 0x2D	; 45
    20f2:	91 05       	cpc	r25, r1
    20f4:	31 f0       	breq	.+12     	; 0x2102 <APP_enuStartApp+0x130>
    20f6:	2a 81       	ldd	r18, Y+2	; 0x02
    20f8:	3b 81       	ldd	r19, Y+3	; 0x03
    20fa:	2f 32       	cpi	r18, 0x2F	; 47
    20fc:	31 05       	cpc	r19, r1
    20fe:	91 f1       	breq	.+100    	; 0x2164 <APP_enuStartApp+0x192>
    2100:	45 c0       	rjmp	.+138    	; 0x218c <APP_enuStartApp+0x1ba>
	 	  {
	 	  case '-':
	 		  if (Number_2 > Number_1)
    2102:	90 91 8b 00 	lds	r25, 0x008B
    2106:	80 91 8e 00 	lds	r24, 0x008E
    210a:	89 17       	cp	r24, r25
    210c:	88 f4       	brcc	.+34     	; 0x2130 <APP_enuStartApp+0x15e>
	 		  {
	 			 Loca_ErrorState|=LCD_enuDisplayChar('-');
    210e:	8d e2       	ldi	r24, 0x2D	; 45
    2110:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    2114:	98 2f       	mov	r25, r24
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	89 2b       	or	r24, r25
    211a:	89 83       	std	Y+1, r24	; 0x01
	 		      Result =Number_2 - Number_1 ;
    211c:	90 91 8b 00 	lds	r25, 0x008B
    2120:	80 91 8e 00 	lds	r24, 0x008E
    2124:	39 2f       	mov	r19, r25
    2126:	38 1b       	sub	r19, r24
    2128:	83 2f       	mov	r24, r19
    212a:	80 93 8a 00 	sts	0x008A, r24
    212e:	2e c0       	rjmp	.+92     	; 0x218c <APP_enuStartApp+0x1ba>
	 		  }else
	 		  {
	 		      Result =Number_1 - Number_2 ;
    2130:	80 91 8e 00 	lds	r24, 0x008E
    2134:	90 91 8b 00 	lds	r25, 0x008B
    2138:	89 1b       	sub	r24, r25
    213a:	80 93 8a 00 	sts	0x008A, r24
    213e:	26 c0       	rjmp	.+76     	; 0x218c <APP_enuStartApp+0x1ba>
	 		  }
	 		  break;
	 	  case '+':
	 		  Result =Number_1 + Number_2 ;
    2140:	80 91 8e 00 	lds	r24, 0x008E
    2144:	90 91 8b 00 	lds	r25, 0x008B
    2148:	89 0f       	add	r24, r25
    214a:	80 93 8a 00 	sts	0x008A, r24
    214e:	1e c0       	rjmp	.+60     	; 0x218c <APP_enuStartApp+0x1ba>
	 		  break;
	 	  case '*':
	 		  Result =Number_1 * Number_2 ;
    2150:	80 91 8e 00 	lds	r24, 0x008E
    2154:	90 91 8b 00 	lds	r25, 0x008B
    2158:	89 9f       	mul	r24, r25
    215a:	80 2d       	mov	r24, r0
    215c:	11 24       	eor	r1, r1
    215e:	80 93 8a 00 	sts	0x008A, r24
    2162:	14 c0       	rjmp	.+40     	; 0x218c <APP_enuStartApp+0x1ba>
	 		  break;
	 	  case '/':
	 		  Result =Number_1 / Number_2 ;
    2164:	80 91 8e 00 	lds	r24, 0x008E
    2168:	90 91 8b 00 	lds	r25, 0x008B
    216c:	69 2f       	mov	r22, r25
    216e:	0e 94 1d 11 	call	0x223a	; 0x223a <__udivmodqi4>
    2172:	80 93 8a 00 	sts	0x008A, r24
    2176:	0a c0       	rjmp	.+20     	; 0x218c <APP_enuStartApp+0x1ba>
	 		  break;
	 	  case '%':
	 		  Result =Number_1 % Number_2 ;
    2178:	80 91 8e 00 	lds	r24, 0x008E
    217c:	90 91 8b 00 	lds	r25, 0x008B
    2180:	69 2f       	mov	r22, r25
    2182:	0e 94 1d 11 	call	0x223a	; 0x223a <__udivmodqi4>
    2186:	89 2f       	mov	r24, r25
    2188:	80 93 8a 00 	sts	0x008A, r24
	 		  break;
	 	  }

	  if( (Result/10) != 0)
    218c:	80 91 8a 00 	lds	r24, 0x008A
    2190:	8a 30       	cpi	r24, 0x0A	; 10
    2192:	70 f1       	brcs	.+92     	; 0x21f0 <APP_enuStartApp+0x21e>
	  {
		 Result_Tens = Result / 10 ;
    2194:	80 91 8a 00 	lds	r24, 0x008A
    2198:	9a e0       	ldi	r25, 0x0A	; 10
    219a:	69 2f       	mov	r22, r25
    219c:	0e 94 1d 11 	call	0x223a	; 0x223a <__udivmodqi4>
    21a0:	80 93 8c 00 	sts	0x008C, r24
		 Result_Ones = Result % 10;
    21a4:	80 91 8a 00 	lds	r24, 0x008A
    21a8:	9a e0       	ldi	r25, 0x0A	; 10
    21aa:	69 2f       	mov	r22, r25
    21ac:	0e 94 1d 11 	call	0x223a	; 0x223a <__udivmodqi4>
    21b0:	89 2f       	mov	r24, r25
    21b2:	80 93 8d 00 	sts	0x008D, r24
		 Loca_ErrorState|=LCD_enuDisplayChar(Arr_Numbers[Result_Tens]);
    21b6:	80 91 8c 00 	lds	r24, 0x008C
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	fc 01       	movw	r30, r24
    21c0:	e0 58       	subi	r30, 0x80	; 128
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    21ca:	98 2f       	mov	r25, r24
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	89 2b       	or	r24, r25
    21d0:	89 83       	std	Y+1, r24	; 0x01
		 Loca_ErrorState|=LCD_enuDisplayChar(Arr_Numbers[Result_Ones]);
    21d2:	80 91 8d 00 	lds	r24, 0x008D
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	fc 01       	movw	r30, r24
    21dc:	e0 58       	subi	r30, 0x80	; 128
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    21e6:	98 2f       	mov	r25, r24
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	89 2b       	or	r24, r25
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	15 c0       	rjmp	.+42     	; 0x221a <APP_enuStartApp+0x248>
	  }
	  else
	  {
		  Result_Ones = Result;
    21f0:	80 91 8a 00 	lds	r24, 0x008A
    21f4:	80 93 8d 00 	sts	0x008D, r24
		  Loca_ErrorState|=LCD_enuDisplayChar(Arr_Numbers[Result_Ones]);
    21f8:	80 91 8d 00 	lds	r24, 0x008D
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	fc 01       	movw	r30, r24
    2202:	e0 58       	subi	r30, 0x80	; 128
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_enuDisplayChar>
    220c:	98 2f       	mov	r25, r24
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	89 2b       	or	r24, r25
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	02 c0       	rjmp	.+4      	; 0x221a <APP_enuStartApp+0x248>
	  }
	 }
	 else
	 {
		 LCD_u8Clear();
    2216:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_u8Clear>
	 }

	return Loca_ErrorState ;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <main>:
#include "../HAL/KEYPAD/Keypad_config.h"

#include "APP_int.h"

int main (void)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62

     APP_enuInit();
    2230:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <APP_enuInit>

	while(1)
    	{

       APP_enuStartApp();
    2234:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <APP_enuStartApp>
    2238:	fd cf       	rjmp	.-6      	; 0x2234 <main+0xc>

0000223a <__udivmodqi4>:
    223a:	99 1b       	sub	r25, r25
    223c:	79 e0       	ldi	r23, 0x09	; 9
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <__udivmodqi4_ep>

00002240 <__udivmodqi4_loop>:
    2240:	99 1f       	adc	r25, r25
    2242:	96 17       	cp	r25, r22
    2244:	08 f0       	brcs	.+2      	; 0x2248 <__udivmodqi4_ep>
    2246:	96 1b       	sub	r25, r22

00002248 <__udivmodqi4_ep>:
    2248:	88 1f       	adc	r24, r24
    224a:	7a 95       	dec	r23
    224c:	c9 f7       	brne	.-14     	; 0x2240 <__udivmodqi4_loop>
    224e:	80 95       	com	r24
    2250:	08 95       	ret

00002252 <__prologue_saves__>:
    2252:	2f 92       	push	r2
    2254:	3f 92       	push	r3
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	ca 1b       	sub	r28, r26
    227c:	db 0b       	sbc	r29, r27
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	09 94       	ijmp

0000228a <__epilogue_restores__>:
    228a:	2a 88       	ldd	r2, Y+18	; 0x12
    228c:	39 88       	ldd	r3, Y+17	; 0x11
    228e:	48 88       	ldd	r4, Y+16	; 0x10
    2290:	5f 84       	ldd	r5, Y+15	; 0x0f
    2292:	6e 84       	ldd	r6, Y+14	; 0x0e
    2294:	7d 84       	ldd	r7, Y+13	; 0x0d
    2296:	8c 84       	ldd	r8, Y+12	; 0x0c
    2298:	9b 84       	ldd	r9, Y+11	; 0x0b
    229a:	aa 84       	ldd	r10, Y+10	; 0x0a
    229c:	b9 84       	ldd	r11, Y+9	; 0x09
    229e:	c8 84       	ldd	r12, Y+8	; 0x08
    22a0:	df 80       	ldd	r13, Y+7	; 0x07
    22a2:	ee 80       	ldd	r14, Y+6	; 0x06
    22a4:	fd 80       	ldd	r15, Y+5	; 0x05
    22a6:	0c 81       	ldd	r16, Y+4	; 0x04
    22a8:	1b 81       	ldd	r17, Y+3	; 0x03
    22aa:	aa 81       	ldd	r26, Y+2	; 0x02
    22ac:	b9 81       	ldd	r27, Y+1	; 0x01
    22ae:	ce 0f       	add	r28, r30
    22b0:	d1 1d       	adc	r29, r1
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	ed 01       	movw	r28, r26
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
